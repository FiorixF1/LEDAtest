ARM GAS  /tmp/ccNFo2Pq.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.Delay,"ax",%progbits
  20              		.align	2
  21              		.global	Delay
  22              		.thumb
  23              		.thumb_func
  25              	Delay:
  26              	.LFB140:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "usart.h"
  24:Src/main.c    **** #include "gpio.h"
  25:Src/main.c    **** 
  26:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  27:Src/main.c    **** /* USER CODE BEGIN Includes */
  28:Src/main.c    **** #include <string.h>
  29:Src/main.c    **** #include <time.h>
  30:Src/main.c    **** #include <stdlib.h>
  31:Src/main.c    **** #include <stdio.h>
ARM GAS  /tmp/ccNFo2Pq.s 			page 2


  32:Src/main.c    **** #include "api.h"
  33:Src/main.c    **** /* USER CODE END Includes */
  34:Src/main.c    **** 
  35:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  36:Src/main.c    **** /* USER CODE BEGIN PTD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* USER CODE END PTD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PD */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE END PD */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  46:Src/main.c    **** /* USER CODE BEGIN PM */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE END PM */
  49:Src/main.c    **** 
  50:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE BEGIN PV */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE END PV */
  55:Src/main.c    **** 
  56:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  57:Src/main.c    **** void SystemClock_Config(void);
  58:Src/main.c    **** /* USER CODE BEGIN PFP */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* USER CODE END PFP */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  63:Src/main.c    **** /* USER CODE BEGIN 0 */
  64:Src/main.c    **** void Delay(__IO uint32_t nCount)
  65:Src/main.c    **** {
  28              		.loc 1 65 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34 0000 82B0     		sub	sp, sp, #8
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37 0002 0190     		str	r0, [sp, #4]
  38              	.L2:
  66:Src/main.c    ****     while (nCount--);
  39              		.loc 1 66 0 discriminator 1
  40 0004 019B     		ldr	r3, [sp, #4]
  41 0006 5A1E     		subs	r2, r3, #1
  42 0008 0192     		str	r2, [sp, #4]
  43 000a 002B     		cmp	r3, #0
  44 000c FAD1     		bne	.L2
  67:Src/main.c    **** }
  45              		.loc 1 67 0
  46 000e 02B0     		add	sp, sp, #8
  47              	.LCFI1:
  48              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccNFo2Pq.s 			page 3


  49              		@ sp needed
  50 0010 7047     		bx	lr
  51              		.cfi_endproc
  52              	.LFE140:
  54 0012 00BF     		.section	.text.printBytes,"ax",%progbits
  55              		.align	2
  56              		.global	printBytes
  57              		.thumb
  58              		.thumb_func
  60              	printBytes:
  61              	.LFB141:
  68:Src/main.c    **** 
  69:Src/main.c    **** void printBytes(unsigned char *data, int length) {
  62              		.loc 1 69 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 16
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              	.LVL1:
  67 0000 70B5     		push	{r4, r5, r6, lr}
  68              	.LCFI2:
  69              		.cfi_def_cfa_offset 16
  70              		.cfi_offset 4, -16
  71              		.cfi_offset 5, -12
  72              		.cfi_offset 6, -8
  73              		.cfi_offset 14, -4
  74 0002 84B0     		sub	sp, sp, #16
  75              	.LCFI3:
  76              		.cfi_def_cfa_offset 32
  77 0004 0646     		mov	r6, r0
  78 0006 0D46     		mov	r5, r1
  79              	.LVL2:
  70:Src/main.c    ****     char buffer[16];
  71:Src/main.c    ****     int i;
  72:Src/main.c    ****     for (i = 0; i < length; ++i) {
  80              		.loc 1 72 0
  81 0008 0024     		movs	r4, #0
  82 000a 0CE0     		b	.L5
  83              	.LVL3:
  84              	.L6:
  73:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%02x", data[i]), 0xFFFFFF);
  85              		.loc 1 73 0 discriminator 3
  86 000c 6846     		mov	r0, sp
  87 000e 0849     		ldr	r1, .L8
  88 0010 325D     		ldrb	r2, [r6, r4]	@ zero_extendqisi2
  89 0012 FFF7FEFF 		bl	sprintf
  90              	.LVL4:
  91 0016 82B2     		uxth	r2, r0
  92 0018 0648     		ldr	r0, .L8+4
  93 001a 6946     		mov	r1, sp
  94 001c 6FF07F43 		mvn	r3, #-16777216
  95 0020 FFF7FEFF 		bl	HAL_UART_Transmit
  96              	.LVL5:
  72:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%02x", data[i]), 0xFFFFFF);
  97              		.loc 1 72 0 discriminator 3
  98 0024 0134     		adds	r4, r4, #1
  99              	.LVL6:
 100              	.L5:
ARM GAS  /tmp/ccNFo2Pq.s 			page 4


  72:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%02x", data[i]), 0xFFFFFF);
 101              		.loc 1 72 0 is_stmt 0 discriminator 1
 102 0026 AC42     		cmp	r4, r5
 103 0028 F0DB     		blt	.L6
  74:Src/main.c    ****     }
  75:Src/main.c    **** }
 104              		.loc 1 75 0 is_stmt 1
 105 002a 04B0     		add	sp, sp, #16
 106              	.LCFI4:
 107              		.cfi_def_cfa_offset 16
 108              		@ sp needed
 109 002c 70BD     		pop	{r4, r5, r6, pc}
 110              	.LVL7:
 111              	.L9:
 112 002e 00BF     		.align	2
 113              	.L8:
 114 0030 00000000 		.word	.LC0
 115 0034 00000000 		.word	huart2
 116              		.cfi_endproc
 117              	.LFE141:
 119              		.section	.text.SystemClock_Config,"ax",%progbits
 120              		.align	2
 121              		.global	SystemClock_Config
 122              		.thumb
 123              		.thumb_func
 125              	SystemClock_Config:
 126              	.LFB143:
  76:Src/main.c    **** 
  77:Src/main.c    **** /* USER CODE END 0 */
  78:Src/main.c    **** 
  79:Src/main.c    **** /**
  80:Src/main.c    ****   * @brief  The application entry point.
  81:Src/main.c    ****   * @retval int
  82:Src/main.c    ****   */
  83:Src/main.c    **** int main(void)
  84:Src/main.c    **** {
  85:Src/main.c    ****   /* USER CODE BEGIN 1 */
  86:Src/main.c    **** 
  87:Src/main.c    ****   /* USER CODE END 1 */
  88:Src/main.c    ****   
  89:Src/main.c    **** 
  90:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  91:Src/main.c    **** 
  92:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  93:Src/main.c    ****   HAL_Init();
  94:Src/main.c    **** 
  95:Src/main.c    ****   /* USER CODE BEGIN Init */
  96:Src/main.c    **** 
  97:Src/main.c    ****   /* USER CODE END Init */
  98:Src/main.c    **** 
  99:Src/main.c    ****   /* Configure the system clock */
 100:Src/main.c    ****   SystemClock_Config();
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 103:Src/main.c    **** 
 104:Src/main.c    ****   /* USER CODE END SysInit */
 105:Src/main.c    **** 
ARM GAS  /tmp/ccNFo2Pq.s 			page 5


 106:Src/main.c    ****   /* Initialize all configured peripherals */
 107:Src/main.c    ****   MX_GPIO_Init();
 108:Src/main.c    ****   MX_USART2_UART_Init();
 109:Src/main.c    ****   /* USER CODE BEGIN 2 */
 110:Src/main.c    ****   char *test = "I'm alive\n\r";
 111:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)test, strlen(test), 0xFFFFFF);
 112:Src/main.c    ****   
 113:Src/main.c    ****   srand(0);
 114:Src/main.c    ****   for (int i = 0; i < 10; ++i) {
 115:Src/main.c    ****       char number[10];
 116:Src/main.c    ****       itoa(rand() % 1000, number, 10);
 117:Src/main.c    ****       number[strlen(number)+1] = 0;
 118:Src/main.c    ****       number[strlen(number)] = '\n';
 119:Src/main.c    ****       HAL_UART_Transmit(&huart2, (uint8_t*)number, strlen(number), 0xFFFFFF);
 120:Src/main.c    ****   }
 121:Src/main.c    ****   
 122:Src/main.c    ****   unsigned char entropy[48];
 123:Src/main.c    ****   unsigned char custom[48] = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
 124:Src/main.c    ****   for (unsigned char i = 0; i < 48; ++i) {
 125:Src/main.c    ****       entropy[i] = i & 0xff;
 126:Src/main.c    ****   }
 127:Src/main.c    ****   randombytes_init(entropy, custom, 1);
 128:Src/main.c    ****   
 129:Src/main.c    ****   char *PAIR = "\n\rGenerating keys...";
 130:Src/main.c    ****   char *PK = "\n\rPublic key is: ";
 131:Src/main.c    ****   char *SK = "\n\rPrivate key is: ";
 132:Src/main.c    ****   char *ENC = "\n\rEncrypting...";
 133:Src/main.c    ****   char *DEC = "\n\rDecrypting...";
 134:Src/main.c    ****   char *SHOW_CTX = "\n\rCiphertext Encrypt(e, pk) is: ";
 135:Src/main.c    ****   char *SHOW_SS = "\n\rShared secret Hash(e) - or Hash(c.k) - is: ";
 136:Src/main.c    ****   char *ERR_PAIR = "\n\rError in keypair";
 137:Src/main.c    ****   char *ERR_ENC = "\n\rError in enc";
 138:Src/main.c    ****   char *ERR_DEC = "\n\rError in dec";
 139:Src/main.c    ****   int ans;
 140:Src/main.c    ****   
 141:Src/main.c    ****   unsigned char msg[CRYPTO_CIPHERTEXTBYTES] = "Hello Nucleo Fun!\n\r";
 142:Src/main.c    ****   unsigned char pk[CRYPTO_PUBLICKEYBYTES];
 143:Src/main.c    ****   unsigned char sk[CRYPTO_SECRETKEYBYTES];
 144:Src/main.c    ****   unsigned char ss[CRYPTO_BYTES];
 145:Src/main.c    ****   
 146:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)PAIR, strlen(PAIR), 0xFFFFFF);
 147:Src/main.c    ****   ans = crypto_kem_keypair(pk, sk);
 148:Src/main.c    ****   if (ans != 0) HAL_UART_Transmit(&huart2, (uint8_t*)ERR_PAIR, strlen(ERR_PAIR), 0xFFFFFF);
 149:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)PK, strlen(PK), 0xFFFFFF);
 150:Src/main.c    ****   printBytes(pk, CRYPTO_PUBLICKEYBYTES);
 151:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SK, strlen(SK), 0xFFFFFF);
 152:Src/main.c    ****   printBytes(sk, CRYPTO_SECRETKEYBYTES);
 153:Src/main.c    ****   
 154:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)ENC, strlen(ENC), 0xFFFFFF);
 155:Src/main.c    ****   ans = crypto_kem_enc(msg, ss, pk);
 156:Src/main.c    ****   if (ans != 0) HAL_UART_Transmit(&huart2, (uint8_t*)ERR_ENC, strlen(ERR_ENC), 0xFFFFFF);
 157:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SHOW_CTX, strlen(SHOW_CTX), 0xFFFFFF);
 158:Src/main.c    ****   printBytes(msg, CRYPTO_CIPHERTEXTBYTES);
 159:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SHOW_SS, strlen(SHOW_SS), 0xFFFFFF);
 160:Src/main.c    ****   printBytes(ss, CRYPTO_BYTES);
 161:Src/main.c    ****   
 162:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)DEC, strlen(DEC), 0xFFFFFF);
ARM GAS  /tmp/ccNFo2Pq.s 			page 6


 163:Src/main.c    ****   ans = crypto_kem_dec(ss, msg, sk);
 164:Src/main.c    ****   if (ans != 0) HAL_UART_Transmit(&huart2, (uint8_t*)ERR_DEC, strlen(ERR_DEC), 0xFFFFFF);
 165:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SHOW_SS, strlen(SHOW_SS), 0xFFFFFF);
 166:Src/main.c    ****   printBytes(ss, CRYPTO_BYTES);
 167:Src/main.c    ****   
 168:Src/main.c    ****   /* USER CODE END 2 */
 169:Src/main.c    **** 
 170:Src/main.c    ****   /* Infinite loop */
 171:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 172:Src/main.c    ****   while (1)
 173:Src/main.c    ****   {
 174:Src/main.c    ****     /* USER CODE END WHILE */
 175:Src/main.c    ****     HAL_GPIO_TogglePin(Ld2_GPIO_Port,Ld2_Pin); //Toggle LED
 176:Src/main.c    ****     HAL_Delay(1000); //Delay 1 Seconds
 177:Src/main.c    ****     /* USER CODE BEGIN 3 */
 178:Src/main.c    ****   }
 179:Src/main.c    ****   /* USER CODE END 3 */
 180:Src/main.c    **** }
 181:Src/main.c    **** 
 182:Src/main.c    **** /**
 183:Src/main.c    ****   * @brief System Clock Configuration
 184:Src/main.c    ****   * @retval None
 185:Src/main.c    ****   */
 186:Src/main.c    **** void SystemClock_Config(void)
 187:Src/main.c    **** {
 127              		.loc 1 187 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 80
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131 0000 30B5     		push	{r4, r5, lr}
 132              	.LCFI5:
 133              		.cfi_def_cfa_offset 12
 134              		.cfi_offset 4, -12
 135              		.cfi_offset 5, -8
 136              		.cfi_offset 14, -4
 137 0002 95B0     		sub	sp, sp, #84
 138              	.LCFI6:
 139              		.cfi_def_cfa_offset 96
 188:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 140              		.loc 1 188 0
 141 0004 0024     		movs	r4, #0
 142 0006 0794     		str	r4, [sp, #28]
 143 0008 0894     		str	r4, [sp, #32]
 144 000a 0994     		str	r4, [sp, #36]
 145 000c 0A94     		str	r4, [sp, #40]
 146 000e 0B94     		str	r4, [sp, #44]
 147 0010 0C94     		str	r4, [sp, #48]
 148 0012 0D94     		str	r4, [sp, #52]
 149 0014 0E94     		str	r4, [sp, #56]
 150 0016 0F94     		str	r4, [sp, #60]
 151 0018 1094     		str	r4, [sp, #64]
 152 001a 1194     		str	r4, [sp, #68]
 153 001c 1294     		str	r4, [sp, #72]
 154 001e 1394     		str	r4, [sp, #76]
 189:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 155              		.loc 1 189 0
 156 0020 0294     		str	r4, [sp, #8]
ARM GAS  /tmp/ccNFo2Pq.s 			page 7


 157 0022 0394     		str	r4, [sp, #12]
 158 0024 0494     		str	r4, [sp, #16]
 159 0026 0594     		str	r4, [sp, #20]
 160 0028 0694     		str	r4, [sp, #24]
 161              	.LBB2:
 190:Src/main.c    **** 
 191:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 192:Src/main.c    ****   */
 193:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 162              		.loc 1 193 0
 163 002a 0094     		str	r4, [sp]
 164 002c 1B4B     		ldr	r3, .L12
 165 002e 1A6C     		ldr	r2, [r3, #64]
 166 0030 42F08052 		orr	r2, r2, #268435456
 167 0034 1A64     		str	r2, [r3, #64]
 168 0036 1B6C     		ldr	r3, [r3, #64]
 169 0038 03F08053 		and	r3, r3, #268435456
 170 003c 0093     		str	r3, [sp]
 171 003e 009B     		ldr	r3, [sp]
 172              	.LBE2:
 173              	.LBB3:
 194:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 174              		.loc 1 194 0
 175 0040 0194     		str	r4, [sp, #4]
 176 0042 174A     		ldr	r2, .L12+4
 177 0044 1368     		ldr	r3, [r2]
 178 0046 23F44043 		bic	r3, r3, #49152
 179 004a 43F48043 		orr	r3, r3, #16384
 180 004e 1360     		str	r3, [r2]
 181 0050 1368     		ldr	r3, [r2]
 182 0052 03F44043 		and	r3, r3, #49152
 183 0056 0193     		str	r3, [sp, #4]
 184 0058 019B     		ldr	r3, [sp, #4]
 185              	.LBE3:
 195:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 196:Src/main.c    ****   */
 197:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 186              		.loc 1 197 0
 187 005a 0225     		movs	r5, #2
 188 005c 0795     		str	r5, [sp, #28]
 198:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 189              		.loc 1 198 0
 190 005e 0123     		movs	r3, #1
 191 0060 0A93     		str	r3, [sp, #40]
 199:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 192              		.loc 1 199 0
 193 0062 1023     		movs	r3, #16
 194 0064 0B93     		str	r3, [sp, #44]
 200:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 195              		.loc 1 200 0
 196 0066 0D95     		str	r5, [sp, #52]
 201:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 197              		.loc 1 201 0
 198 0068 0E94     		str	r4, [sp, #56]
 202:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 199              		.loc 1 202 0
 200 006a 0F93     		str	r3, [sp, #60]
ARM GAS  /tmp/ccNFo2Pq.s 			page 8


 203:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 201              		.loc 1 203 0
 202 006c 4FF4A873 		mov	r3, #336
 203 0070 1093     		str	r3, [sp, #64]
 204:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 204              		.loc 1 204 0
 205 0072 0423     		movs	r3, #4
 206 0074 1193     		str	r3, [sp, #68]
 205:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 207              		.loc 1 205 0
 208 0076 1295     		str	r5, [sp, #72]
 206:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = 2;
 209              		.loc 1 206 0
 210 0078 1395     		str	r5, [sp, #76]
 207:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 211              		.loc 1 207 0
 212 007a 07A8     		add	r0, sp, #28
 213 007c FFF7FEFF 		bl	HAL_RCC_OscConfig
 214              	.LVL8:
 208:Src/main.c    ****   {
 209:Src/main.c    ****     Error_Handler();
 210:Src/main.c    ****   }
 211:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 212:Src/main.c    ****   */
 213:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 215              		.loc 1 213 0
 216 0080 0F23     		movs	r3, #15
 217 0082 0293     		str	r3, [sp, #8]
 214:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 215:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 218              		.loc 1 215 0
 219 0084 0395     		str	r5, [sp, #12]
 216:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 220              		.loc 1 216 0
 221 0086 0494     		str	r4, [sp, #16]
 217:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 222              		.loc 1 217 0
 223 0088 4FF48053 		mov	r3, #4096
 224 008c 0593     		str	r3, [sp, #20]
 218:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 225              		.loc 1 218 0
 226 008e 0694     		str	r4, [sp, #24]
 219:Src/main.c    **** 
 220:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 227              		.loc 1 220 0
 228 0090 02A8     		add	r0, sp, #8
 229 0092 2946     		mov	r1, r5
 230 0094 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 231              	.LVL9:
 221:Src/main.c    ****   {
 222:Src/main.c    ****     Error_Handler();
 223:Src/main.c    ****   }
 224:Src/main.c    **** }
 232              		.loc 1 224 0
 233 0098 15B0     		add	sp, sp, #84
 234              	.LCFI7:
 235              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccNFo2Pq.s 			page 9


 236              		@ sp needed
 237 009a 30BD     		pop	{r4, r5, pc}
 238              	.L13:
 239              		.align	2
 240              	.L12:
 241 009c 00380240 		.word	1073887232
 242 00a0 00700040 		.word	1073770496
 243              		.cfi_endproc
 244              	.LFE143:
 246              		.section	.text.main,"ax",%progbits
 247              		.align	2
 248              		.global	main
 249              		.thumb
 250              		.thumb_func
 252              	main:
 253              	.LFB142:
  84:Src/main.c    ****   /* USER CODE BEGIN 1 */
 254              		.loc 1 84 0
 255              		.cfi_startproc
 256              		@ args = 0, pretend = 0, frame = 3904
 257              		@ frame_needed = 0, uses_anonymous_args = 0
 258 0000 30B5     		push	{r4, r5, lr}
 259              	.LCFI8:
 260              		.cfi_def_cfa_offset 12
 261              		.cfi_offset 4, -12
 262              		.cfi_offset 5, -8
 263              		.cfi_offset 14, -4
 264 0002 ADF6447D 		subw	sp, sp, #3908
 265              	.LCFI9:
 266              		.cfi_def_cfa_offset 3920
  93:Src/main.c    **** 
 267              		.loc 1 93 0
 268 0006 FFF7FEFF 		bl	HAL_Init
 269              	.LVL10:
 100:Src/main.c    **** 
 270              		.loc 1 100 0
 271 000a FFF7FEFF 		bl	SystemClock_Config
 272              	.LVL11:
 107:Src/main.c    ****   MX_USART2_UART_Init();
 273              		.loc 1 107 0
 274 000e FFF7FEFF 		bl	MX_GPIO_Init
 275              	.LVL12:
 108:Src/main.c    ****   /* USER CODE BEGIN 2 */
 276              		.loc 1 108 0
 277 0012 FFF7FEFF 		bl	MX_USART2_UART_Init
 278              	.LVL13:
 111:Src/main.c    ****   
 279              		.loc 1 111 0
 280 0016 7148     		ldr	r0, .L24
 281 0018 7149     		ldr	r1, .L24+4
 282 001a 0B22     		movs	r2, #11
 283 001c 6FF07F43 		mvn	r3, #-16777216
 284 0020 FFF7FEFF 		bl	HAL_UART_Transmit
 285              	.LVL14:
 113:Src/main.c    ****   for (int i = 0; i < 10; ++i) {
 286              		.loc 1 113 0
 287 0024 0020     		movs	r0, #0
ARM GAS  /tmp/ccNFo2Pq.s 			page 10


 288 0026 FFF7FEFF 		bl	srand
 289              	.LVL15:
 290              	.LBB4:
 114:Src/main.c    ****       char number[10];
 291              		.loc 1 114 0
 292 002a 0025     		movs	r5, #0
 293 002c 26E0     		b	.L15
 294              	.LVL16:
 295              	.L16:
 296              	.LBB5:
 116:Src/main.c    ****       number[strlen(number)+1] = 0;
 297              		.loc 1 116 0 discriminator 3
 298 002e FFF7FEFF 		bl	rand
 299              	.LVL17:
 300 0032 6C4B     		ldr	r3, .L24+8
 301 0034 83FB0032 		smull	r3, r2, r3, r0
 302 0038 C317     		asrs	r3, r0, #31
 303 003a C3EBA213 		rsb	r3, r3, r2, asr #6
 304 003e 01AC     		add	r4, sp, #4
 305 0040 4FF47A72 		mov	r2, #1000
 306 0044 02FB1300 		mls	r0, r2, r3, r0
 307 0048 2146     		mov	r1, r4
 308 004a 0A22     		movs	r2, #10
 309 004c FFF7FEFF 		bl	itoa
 310              	.LVL18:
 117:Src/main.c    ****       number[strlen(number)] = '\n';
 311              		.loc 1 117 0 discriminator 3
 312 0050 2046     		mov	r0, r4
 313 0052 FFF7FEFF 		bl	strlen
 314              	.LVL19:
 315 0056 0130     		adds	r0, r0, #1
 316 0058 0023     		movs	r3, #0
 317 005a 2354     		strb	r3, [r4, r0]
 118:Src/main.c    ****       HAL_UART_Transmit(&huart2, (uint8_t*)number, strlen(number), 0xFFFFFF);
 318              		.loc 1 118 0 discriminator 3
 319 005c 2046     		mov	r0, r4
 320 005e FFF7FEFF 		bl	strlen
 321              	.LVL20:
 322 0062 0A23     		movs	r3, #10
 323 0064 2354     		strb	r3, [r4, r0]
 119:Src/main.c    ****   }
 324              		.loc 1 119 0 discriminator 3
 325 0066 2046     		mov	r0, r4
 326 0068 FFF7FEFF 		bl	strlen
 327              	.LVL21:
 328 006c 82B2     		uxth	r2, r0
 329 006e 5B48     		ldr	r0, .L24
 330 0070 2146     		mov	r1, r4
 331 0072 6FF07F43 		mvn	r3, #-16777216
 332 0076 FFF7FEFF 		bl	HAL_UART_Transmit
 333              	.LVL22:
 334              	.LBE5:
 114:Src/main.c    ****       char number[10];
 335              		.loc 1 114 0 discriminator 3
 336 007a 0135     		adds	r5, r5, #1
 337              	.LVL23:
 338              	.L15:
ARM GAS  /tmp/ccNFo2Pq.s 			page 11


 114:Src/main.c    ****       char number[10];
 339              		.loc 1 114 0 is_stmt 0 discriminator 1
 340 007c 092D     		cmp	r5, #9
 341 007e D6DD     		ble	.L16
 342              	.LBE4:
 123:Src/main.c    ****   for (unsigned char i = 0; i < 48; ++i) {
 343              		.loc 1 123 0 is_stmt 1
 344 0080 0DF56E64 		add	r4, sp, #3808
 345 0084 584D     		ldr	r5, .L24+12
 346              	.LVL24:
 347 0086 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 348 0088 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 349 008a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 350 008c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 351 008e 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 352 0092 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 353              	.LVL25:
 354              	.LBB6:
 124:Src/main.c    ****       entropy[i] = i & 0xff;
 355              		.loc 1 124 0
 356 0096 0023     		movs	r3, #0
 357 0098 06E0     		b	.L17
 358              	.LVL26:
 359              	.L18:
 125:Src/main.c    ****   }
 360              		.loc 1 125 0 discriminator 3
 361 009a 0DF57462 		add	r2, sp, #3904
 362 009e 1A44     		add	r2, r2, r3
 363 00a0 02F8303C 		strb	r3, [r2, #-48]
 124:Src/main.c    ****       entropy[i] = i & 0xff;
 364              		.loc 1 124 0 discriminator 3
 365 00a4 0133     		adds	r3, r3, #1
 366              	.LVL27:
 367 00a6 DBB2     		uxtb	r3, r3
 368              	.LVL28:
 369              	.L17:
 124:Src/main.c    ****       entropy[i] = i & 0xff;
 370              		.loc 1 124 0 is_stmt 0 discriminator 1
 371 00a8 2F2B     		cmp	r3, #47
 372 00aa F6D9     		bls	.L18
 373              	.LBE6:
 127:Src/main.c    ****   
 374              		.loc 1 127 0 is_stmt 1
 375 00ac 0DF57160 		add	r0, sp, #3856
 376 00b0 0DF56E61 		add	r1, sp, #3808
 377 00b4 0122     		movs	r2, #1
 378 00b6 FFF7FEFF 		bl	randombytes_init
 379              	.LVL29:
 141:Src/main.c    ****   unsigned char pk[CRYPTO_PUBLICKEYBYTES];
 380              		.loc 1 141 0
 381 00ba 0DF29474 		addw	r4, sp, #1940
 382 00be 4B4D     		ldr	r5, .L24+16
 383 00c0 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 384 00c2 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 385 00c4 2B68     		ldr	r3, [r5]
 386 00c6 2360     		str	r3, [r4]
 387 00c8 0DF5F560 		add	r0, sp, #1960
ARM GAS  /tmp/ccNFo2Pq.s 			page 12


 388 00cc 0021     		movs	r1, #0
 389 00ce 4FF4E762 		mov	r2, #1848
 390 00d2 FFF7FEFF 		bl	memset
 391              	.LVL30:
 146:Src/main.c    ****   ans = crypto_kem_keypair(pk, sk);
 392              		.loc 1 146 0
 393 00d6 4148     		ldr	r0, .L24
 394 00d8 4549     		ldr	r1, .L24+20
 395 00da 1422     		movs	r2, #20
 396 00dc 6FF07F43 		mvn	r3, #-16777216
 397 00e0 FFF7FEFF 		bl	HAL_UART_Transmit
 398              	.LVL31:
 147:Src/main.c    ****   if (ans != 0) HAL_UART_Transmit(&huart2, (uint8_t*)ERR_PAIR, strlen(ERR_PAIR), 0xFFFFFF);
 399              		.loc 1 147 0
 400 00e4 12A8     		add	r0, sp, #72
 401 00e6 0CA9     		add	r1, sp, #48
 402 00e8 FFF7FEFF 		bl	crypto_kem_keypair
 403              	.LVL32:
 148:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)PK, strlen(PK), 0xFFFFFF);
 404              		.loc 1 148 0
 405 00ec 30B1     		cbz	r0, .L19
 148:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)PK, strlen(PK), 0xFFFFFF);
 406              		.loc 1 148 0 is_stmt 0 discriminator 1
 407 00ee 3B48     		ldr	r0, .L24
 408              	.LVL33:
 409 00f0 4049     		ldr	r1, .L24+24
 410 00f2 1222     		movs	r2, #18
 411 00f4 6FF07F43 		mvn	r3, #-16777216
 412 00f8 FFF7FEFF 		bl	HAL_UART_Transmit
 413              	.LVL34:
 414              	.L19:
 149:Src/main.c    ****   printBytes(pk, CRYPTO_PUBLICKEYBYTES);
 415              		.loc 1 149 0 is_stmt 1
 416 00fc 374C     		ldr	r4, .L24
 417 00fe 2046     		mov	r0, r4
 418 0100 3D49     		ldr	r1, .L24+28
 419 0102 1122     		movs	r2, #17
 420 0104 6FF07F43 		mvn	r3, #-16777216
 421 0108 FFF7FEFF 		bl	HAL_UART_Transmit
 422              	.LVL35:
 150:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SK, strlen(SK), 0xFFFFFF);
 423              		.loc 1 150 0
 424 010c 12A8     		add	r0, sp, #72
 425 010e 40F24C71 		movw	r1, #1868
 426 0112 FFF7FEFF 		bl	printBytes
 427              	.LVL36:
 151:Src/main.c    ****   printBytes(sk, CRYPTO_SECRETKEYBYTES);
 428              		.loc 1 151 0
 429 0116 2046     		mov	r0, r4
 430 0118 3849     		ldr	r1, .L24+32
 431 011a 1222     		movs	r2, #18
 432 011c 6FF07F43 		mvn	r3, #-16777216
 433 0120 FFF7FEFF 		bl	HAL_UART_Transmit
 434              	.LVL37:
 152:Src/main.c    ****   
 435              		.loc 1 152 0
 436 0124 0CA8     		add	r0, sp, #48
ARM GAS  /tmp/ccNFo2Pq.s 			page 13


 437 0126 1821     		movs	r1, #24
 438 0128 FFF7FEFF 		bl	printBytes
 439              	.LVL38:
 154:Src/main.c    ****   ans = crypto_kem_enc(msg, ss, pk);
 440              		.loc 1 154 0
 441 012c 2046     		mov	r0, r4
 442 012e 3449     		ldr	r1, .L24+36
 443 0130 0F22     		movs	r2, #15
 444 0132 6FF07F43 		mvn	r3, #-16777216
 445 0136 FFF7FEFF 		bl	HAL_UART_Transmit
 446              	.LVL39:
 155:Src/main.c    ****   if (ans != 0) HAL_UART_Transmit(&huart2, (uint8_t*)ERR_ENC, strlen(ERR_ENC), 0xFFFFFF);
 447              		.loc 1 155 0
 448 013a 0DF29470 		addw	r0, sp, #1940
 449 013e 04A9     		add	r1, sp, #16
 450 0140 12AA     		add	r2, sp, #72
 451 0142 FFF7FEFF 		bl	crypto_kem_enc
 452              	.LVL40:
 156:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SHOW_CTX, strlen(SHOW_CTX), 0xFFFFFF);
 453              		.loc 1 156 0
 454 0146 30B1     		cbz	r0, .L20
 156:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SHOW_CTX, strlen(SHOW_CTX), 0xFFFFFF);
 455              		.loc 1 156 0 is_stmt 0 discriminator 1
 456 0148 2046     		mov	r0, r4
 457              	.LVL41:
 458 014a 2E49     		ldr	r1, .L24+40
 459 014c 0E22     		movs	r2, #14
 460 014e 6FF07F43 		mvn	r3, #-16777216
 461 0152 FFF7FEFF 		bl	HAL_UART_Transmit
 462              	.LVL42:
 463              	.L20:
 157:Src/main.c    ****   printBytes(msg, CRYPTO_CIPHERTEXTBYTES);
 464              		.loc 1 157 0 is_stmt 1
 465 0156 214C     		ldr	r4, .L24
 466 0158 2046     		mov	r0, r4
 467 015a 2B49     		ldr	r1, .L24+44
 468 015c 2022     		movs	r2, #32
 469 015e 6FF07F43 		mvn	r3, #-16777216
 470 0162 FFF7FEFF 		bl	HAL_UART_Transmit
 471              	.LVL43:
 158:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SHOW_SS, strlen(SHOW_SS), 0xFFFFFF);
 472              		.loc 1 158 0
 473 0166 0DF29470 		addw	r0, sp, #1940
 474 016a 40F24C71 		movw	r1, #1868
 475 016e FFF7FEFF 		bl	printBytes
 476              	.LVL44:
 159:Src/main.c    ****   printBytes(ss, CRYPTO_BYTES);
 477              		.loc 1 159 0
 478 0172 2046     		mov	r0, r4
 479 0174 2549     		ldr	r1, .L24+48
 480 0176 2D22     		movs	r2, #45
 481 0178 6FF07F43 		mvn	r3, #-16777216
 482 017c FFF7FEFF 		bl	HAL_UART_Transmit
 483              	.LVL45:
 160:Src/main.c    ****   
 484              		.loc 1 160 0
 485 0180 04A8     		add	r0, sp, #16
ARM GAS  /tmp/ccNFo2Pq.s 			page 14


 486 0182 2021     		movs	r1, #32
 487 0184 FFF7FEFF 		bl	printBytes
 488              	.LVL46:
 162:Src/main.c    ****   ans = crypto_kem_dec(ss, msg, sk);
 489              		.loc 1 162 0
 490 0188 2046     		mov	r0, r4
 491 018a 2149     		ldr	r1, .L24+52
 492 018c 0F22     		movs	r2, #15
 493 018e 6FF07F43 		mvn	r3, #-16777216
 494 0192 FFF7FEFF 		bl	HAL_UART_Transmit
 495              	.LVL47:
 163:Src/main.c    ****   if (ans != 0) HAL_UART_Transmit(&huart2, (uint8_t*)ERR_DEC, strlen(ERR_DEC), 0xFFFFFF);
 496              		.loc 1 163 0
 497 0196 04A8     		add	r0, sp, #16
 498 0198 0DF29471 		addw	r1, sp, #1940
 499 019c 0CAA     		add	r2, sp, #48
 500 019e FFF7FEFF 		bl	crypto_kem_dec
 501              	.LVL48:
 164:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SHOW_SS, strlen(SHOW_SS), 0xFFFFFF);
 502              		.loc 1 164 0
 503 01a2 30B1     		cbz	r0, .L21
 164:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SHOW_SS, strlen(SHOW_SS), 0xFFFFFF);
 504              		.loc 1 164 0 is_stmt 0 discriminator 1
 505 01a4 2046     		mov	r0, r4
 506              	.LVL49:
 507 01a6 1B49     		ldr	r1, .L24+56
 508 01a8 0E22     		movs	r2, #14
 509 01aa 6FF07F43 		mvn	r3, #-16777216
 510 01ae FFF7FEFF 		bl	HAL_UART_Transmit
 511              	.LVL50:
 512              	.L21:
 165:Src/main.c    ****   printBytes(ss, CRYPTO_BYTES);
 513              		.loc 1 165 0 is_stmt 1
 514 01b2 0A48     		ldr	r0, .L24
 515 01b4 1549     		ldr	r1, .L24+48
 516 01b6 2D22     		movs	r2, #45
 517 01b8 6FF07F43 		mvn	r3, #-16777216
 518 01bc FFF7FEFF 		bl	HAL_UART_Transmit
 519              	.LVL51:
 166:Src/main.c    ****   
 520              		.loc 1 166 0
 521 01c0 04A8     		add	r0, sp, #16
 522 01c2 2021     		movs	r1, #32
 523 01c4 FFF7FEFF 		bl	printBytes
 524              	.LVL52:
 525              	.L22:
 175:Src/main.c    ****     HAL_Delay(1000); //Delay 1 Seconds
 526              		.loc 1 175 0 discriminator 1
 527 01c8 1348     		ldr	r0, .L24+60
 528 01ca 2021     		movs	r1, #32
 529 01cc FFF7FEFF 		bl	HAL_GPIO_TogglePin
 530              	.LVL53:
 176:Src/main.c    ****     /* USER CODE BEGIN 3 */
 531              		.loc 1 176 0 discriminator 1
 532 01d0 4FF47A70 		mov	r0, #1000
 533 01d4 FFF7FEFF 		bl	HAL_Delay
 534              	.LVL54:
ARM GAS  /tmp/ccNFo2Pq.s 			page 15


 178:Src/main.c    ****   /* USER CODE END 3 */
 535              		.loc 1 178 0 discriminator 1
 536 01d8 F6E7     		b	.L22
 537              	.L25:
 538 01da 00BF     		.align	2
 539              	.L24:
 540 01dc 00000000 		.word	huart2
 541 01e0 08000000 		.word	.LC1
 542 01e4 D34D6210 		.word	274877907
 543 01e8 FC000000 		.word	.LC2
 544 01ec 00000000 		.word	.LANCHOR0
 545 01f0 14000000 		.word	.LC4
 546 01f4 2C000000 		.word	.LC5
 547 01f8 40000000 		.word	.LC6
 548 01fc 54000000 		.word	.LC7
 549 0200 68000000 		.word	.LC8
 550 0204 78000000 		.word	.LC9
 551 0208 88000000 		.word	.LC10
 552 020c AC000000 		.word	.LC11
 553 0210 DC000000 		.word	.LC12
 554 0214 EC000000 		.word	.LC13
 555 0218 00000240 		.word	1073872896
 556              		.cfi_endproc
 557              	.LFE142:
 559              		.section	.text.Error_Handler,"ax",%progbits
 560              		.align	2
 561              		.global	Error_Handler
 562              		.thumb
 563              		.thumb_func
 565              	Error_Handler:
 566              	.LFB144:
 225:Src/main.c    **** 
 226:Src/main.c    **** /* USER CODE BEGIN 4 */
 227:Src/main.c    **** 
 228:Src/main.c    **** /* USER CODE END 4 */
 229:Src/main.c    **** 
 230:Src/main.c    **** /**
 231:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 232:Src/main.c    ****   * @retval None
 233:Src/main.c    ****   */
 234:Src/main.c    **** void Error_Handler(void)
 235:Src/main.c    **** {
 567              		.loc 1 235 0
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 0
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 571              		@ link register save eliminated.
 572 0000 7047     		bx	lr
 573              		.cfi_endproc
 574              	.LFE144:
 576 0002 00BF     		.section	.rodata
 577              		.align	2
 578              		.set	.LANCHOR0,. + 0
 579              	.LC3:
 580 0000 48656C6C 		.ascii	"Hello Nucleo Fun!\012\015\000"
 580      6F204E75 
 580      636C656F 
ARM GAS  /tmp/ccNFo2Pq.s 			page 16


 580      2046756E 
 580      210A0D00 
 581 0014 00000000 		.space	1848
 581      00000000 
 581      00000000 
 581      00000000 
 581      00000000 
 582              		.section	.rodata.str1.4,"aMS",%progbits,1
 583              		.align	2
 584              	.LC0:
 585 0000 25303278 		.ascii	"%02x\000"
 585      00
 586 0005 000000   		.space	3
 587              	.LC1:
 588 0008 49276D20 		.ascii	"I'm alive\012\015\000"
 588      616C6976 
 588      650A0D00 
 589              	.LC4:
 590 0014 0A0D4765 		.ascii	"\012\015Generating keys...\000"
 590      6E657261 
 590      74696E67 
 590      206B6579 
 590      732E2E2E 
 591 0029 000000   		.space	3
 592              	.LC5:
 593 002c 0A0D4572 		.ascii	"\012\015Error in keypair\000"
 593      726F7220 
 593      696E206B 
 593      65797061 
 593      697200
 594 003f 00       		.space	1
 595              	.LC6:
 596 0040 0A0D5075 		.ascii	"\012\015Public key is: \000"
 596      626C6963 
 596      206B6579 
 596      2069733A 
 596      2000
 597 0052 0000     		.space	2
 598              	.LC7:
 599 0054 0A0D5072 		.ascii	"\012\015Private key is: \000"
 599      69766174 
 599      65206B65 
 599      79206973 
 599      3A2000
 600 0067 00       		.space	1
 601              	.LC8:
 602 0068 0A0D456E 		.ascii	"\012\015Encrypting...\000"
 602      63727970 
 602      74696E67 
 602      2E2E2E00 
 603              	.LC9:
 604 0078 0A0D4572 		.ascii	"\012\015Error in enc\000"
 604      726F7220 
 604      696E2065 
 604      6E6300
 605 0087 00       		.space	1
 606              	.LC10:
ARM GAS  /tmp/ccNFo2Pq.s 			page 17


 607 0088 0A0D4369 		.ascii	"\012\015Ciphertext Encrypt(e, pk) is: \000"
 607      70686572 
 607      74657874 
 607      20456E63 
 607      72797074 
 608 00a9 000000   		.space	3
 609              	.LC11:
 610 00ac 0A0D5368 		.ascii	"\012\015Shared secret Hash(e) - or Hash(c.k) - is: "
 610      61726564 
 610      20736563 
 610      72657420 
 610      48617368 
 611 00d9 00       		.ascii	"\000"
 612 00da 0000     		.space	2
 613              	.LC12:
 614 00dc 0A0D4465 		.ascii	"\012\015Decrypting...\000"
 614      63727970 
 614      74696E67 
 614      2E2E2E00 
 615              	.LC13:
 616 00ec 0A0D4572 		.ascii	"\012\015Error in dec\000"
 616      726F7220 
 616      696E2064 
 616      656300
 617 00fb 00       		.space	1
 618              	.LC2:
 619 00fc 41414141 		.ascii	"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\000"
 619      41414141 
 619      41414141 
 619      41414141 
 619      41414141 
 620              		.text
 621              	.Letext0:
 622              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 623              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 624              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 625              		.file 5 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h"
 626              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 627              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 628              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 629              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 630              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 631              		.file 11 "Inc/qc_ldpc_parameters.h"
 632              		.file 12 "Drivers/CMSIS/Include/core_cm4.h"
 633              		.file 13 "Inc/usart.h"
 634              		.file 14 "/usr/include/newlib/stdio.h"
 635              		.file 15 "/usr/include/newlib/string.h"
 636              		.file 16 "/usr/include/newlib/stdlib.h"
 637              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 638              		.file 18 "Inc/gpio.h"
 639              		.file 19 "Inc/rng.h"
 640              		.file 20 "Inc/api.h"
 641              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
ARM GAS  /tmp/ccNFo2Pq.s 			page 18


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccNFo2Pq.s:20     .text.Delay:0000000000000000 $t
     /tmp/ccNFo2Pq.s:25     .text.Delay:0000000000000000 Delay
     /tmp/ccNFo2Pq.s:55     .text.printBytes:0000000000000000 $t
     /tmp/ccNFo2Pq.s:60     .text.printBytes:0000000000000000 printBytes
     /tmp/ccNFo2Pq.s:114    .text.printBytes:0000000000000030 $d
     /tmp/ccNFo2Pq.s:120    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccNFo2Pq.s:125    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccNFo2Pq.s:241    .text.SystemClock_Config:000000000000009c $d
     /tmp/ccNFo2Pq.s:247    .text.main:0000000000000000 $t
     /tmp/ccNFo2Pq.s:252    .text.main:0000000000000000 main
     /tmp/ccNFo2Pq.s:540    .text.main:00000000000001dc $d
     /tmp/ccNFo2Pq.s:560    .text.Error_Handler:0000000000000000 $t
     /tmp/ccNFo2Pq.s:565    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccNFo2Pq.s:577    .rodata:0000000000000000 $d
     /tmp/ccNFo2Pq.s:583    .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.20963d46ba5d8e371b8630ece00f11ec
                           .group:0000000000000000 wm4.stm32f4xx_hal_conf.h.24.d14dd899dbfa16d6dc9a7b8d5f0b81d2
                           .group:0000000000000000 wm4.stm32f4xx.h.55.8c995fbadbb7a126747b547eb8ec7b5b
                           .group:0000000000000000 wm4.stm32f446xx.h.51.16a9122ede9860ebbb552c9e423d1ecd
                           .group:0000000000000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:0000000000000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:0000000000000000 wm4._intsup.h.10.35a45952db64d30146faa63a55c20c1c
                           .group:0000000000000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:0000000000000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:0000000000000000 wm4.cmsis_version.h.32.4d5822004c01a829a975260e854b5f8e
                           .group:0000000000000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.f42444deefab66ffa141b9b9fddb57a3
                           .group:0000000000000000 wm4.core_cm4.h.174.059a5e001a9e729091d1407208e93224
                           .group:0000000000000000 wm4.mpu_armv7.h.32.27b4593cb2f8d3152ca5d97a9d72b321
                           .group:0000000000000000 wm4.stm32f446xx.h.934.bc7ea77f64b5be5f795628ebc7fc6b73
                           .group:0000000000000000 wm4.stm32f4xx.h.212.729f0f890654645a3f47ccc0cc2b00e7
                           .group:0000000000000000 wm4.stm32_hal_legacy.h.23.ef4988de22c7a2f0806a94b08b5606e0
                           .group:0000000000000000 wm4.stddef.h.39.c744ceb84abf2f8351653f0e2622da1c
                           .group:0000000000000000 wm4.stm32f4xx_hal_def.h.58.2d2c85d5b9693a63e90566b806e8a752
                           .group:0000000000000000 wm4.stm32f4xx_hal_rcc_ex.h.22.ed8712e28628f6d35bd6f8847ee2f18f
                           .group:0000000000000000 wm4.stm32f4xx_hal_rcc.h.108.0c18a3cfc2dd91bdf92470b4bd0ea1b5
                           .group:0000000000000000 wm4.stm32f4xx_hal_exti.h.22.66e33df8a935c9f8e1682d5515a6c09a
                           .group:0000000000000000 wm4.stm32f4xx_hal_gpio.h.22.be2c6bcf9722096ea8f49a41bf6aa50c
                           .group:0000000000000000 wm4.stm32f4xx_hal_gpio_ex.h.22.6858f59ca8a52c645189c74569e4d5b8
                           .group:0000000000000000 wm4.stm32f4xx_hal_gpio.h.264.528537eb92c2ec5c1cd9dfb4d255d1da
                           .group:0000000000000000 wm4.stm32f4xx_hal_dma.h.22.fffce20ac9119c50557659c75e75ab1c
                           .group:0000000000000000 wm4.stm32f4xx_hal_dma.h.721.a1e57ffbc615f926e6509c5acc65e492
                           .group:0000000000000000 wm4.stm32f4xx_hal_cortex.h.22.e6aa3b847b5388be63c32d1f9e696ef7
                           .group:0000000000000000 wm4.stm32f4xx_hal_flash.h.22.31b301be2655c3eb8583e51c8231544a
                           .group:0000000000000000 wm4.stm32f4xx_hal_flash_ex.h.22.df74a74dd40656a7fcd7d90cedd190b4
                           .group:0000000000000000 wm4.stm32f4xx_hal_flash.h.363.51efdf0f6c88f683efb89d7cc95cc1be
                           .group:0000000000000000 wm4.stm32f4xx_hal_pwr.h.22.2c27d93ae187efe3a73816f03a329970
                           .group:0000000000000000 wm4.stm32f4xx_hal_pwr_ex.h.22.cf49f655fb514fa1eda6a251fa1b2f1a
                           .group:0000000000000000 wm4.stm32f4xx_hal_pwr.h.337.60b43975c84527a23cb6994b23165a5e
                           .group:0000000000000000 wm4.stm32f4xx_hal_uart.h.22.2b47c8130d845b927904837c0b2264ce
                           .group:0000000000000000 wm4.stm32f4xx_hal.h.72.a5a58188aa461a0614f1e58e159c7840
                           .group:0000000000000000 wm4.main.h.61.f713c471afe2510354bc6b2444b9b417
                           .group:0000000000000000 wm4.newlib.h.8.2702bca278809460f0af6fba1d84eb68
                           .group:0000000000000000 wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff
ARM GAS  /tmp/ccNFo2Pq.s 			page 19


                           .group:0000000000000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:0000000000000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:0000000000000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:0000000000000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:0000000000000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:0000000000000000 wm4.cdefs.h.47.55832cb26e4a21cedaa9b1b3b922c6b1
                           .group:0000000000000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:0000000000000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:0000000000000000 wm4.time.h.8.2930fe070f4a8096b07db9159698c8e3
                           .group:0000000000000000 wm4.time.h.2.4581ce0ffb6627cfc02162c94bf846c9
                           .group:0000000000000000 wm4.time.h.24.3660bbb2d0a4c7457ff52ba3ada4c166
                           .group:0000000000000000 wm4.types.h.24.b2be5f53932a9c9d07787288b29b6d75
                           .group:0000000000000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:0000000000000000 wm4.types.h.82.82b71f3f44c70e3a459d0f66642b05eb
                           .group:0000000000000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:0000000000000000 wm4.time.h.217.2f437ac2cf06537c84703833b0977905
                           .group:0000000000000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:0000000000000000 wm4.stdlib.h.54.4fb06e985dc2cdf07f3ef03d3ed01397
                           .group:0000000000000000 wm4.stdio.h.27.3fc80220048df77954e38daec3bb9670
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:0000000000000000 wm4.stdio.h.68.ff6d7571d3ad75c55f15e26dbaa81e35
                           .group:0000000000000000 wm4.qc_ldpc_parameters.h.37.6a7dc7a81c3b4c6a57df61d48c0f4546
                           .group:0000000000000000 wm4.inttypes.h.14.d76379e1484484ef6b6b246cc782d8dc
                           .group:0000000000000000 wm4.inttypes.h.23.73ff1ea04b6018cd02b26f6fdc94fae9
                           .group:0000000000000000 wm4.limits.h.25.5fc8418077d2a1b3fdafee07d2348450
                           .group:0000000000000000 wm4.gf2x_limbs.h.44.4ba8ea293ca87ae1eb808c65b3f7859c
                           .group:0000000000000000 wm4.gf2x_arith.h.78.84d3114adf056aa03d6e1720f5f09797
                           .group:0000000000000000 wm4.rng.h.43.d878a412a37b8758e9c11dbf27ed5812
                           .group:0000000000000000 wm4.gf2x_arith_mod_xPplusOne.h.43.dd456d3b85305b5c168d761e87b26291
                           .group:0000000000000000 wm4.api.h.39.461facc9facebdb29c71caf95c7c4c98

UNDEFINED SYMBOLS
sprintf
HAL_UART_Transmit
huart2
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_USART2_UART_Init
srand
rand
itoa
strlen
randombytes_init
memset
crypto_kem_keypair
crypto_kem_enc
crypto_kem_dec
HAL_GPIO_TogglePin
HAL_Delay
