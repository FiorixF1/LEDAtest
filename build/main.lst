ARM GAS  /tmp/cc9p6RLl.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.Delay,"ax",%progbits
  20              		.align	2
  21              		.global	Delay
  22              		.thumb
  23              		.thumb_func
  25              	Delay:
  26              	.LFB140:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "usart.h"
  24:Src/main.c    **** #include "gpio.h"
  25:Src/main.c    **** 
  26:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  27:Src/main.c    **** /* USER CODE BEGIN Includes */
  28:Src/main.c    **** #include <string.h>
  29:Src/main.c    **** #include <time.h>
  30:Src/main.c    **** #include <stdlib.h>
  31:Src/main.c    **** #include <stdio.h>
ARM GAS  /tmp/cc9p6RLl.s 			page 2


  32:Src/main.c    **** #include "api.h"
  33:Src/main.c    **** /* USER CODE END Includes */
  34:Src/main.c    **** 
  35:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  36:Src/main.c    **** /* USER CODE BEGIN PTD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* USER CODE END PTD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PD */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE END PD */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  46:Src/main.c    **** /* USER CODE BEGIN PM */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE END PM */
  49:Src/main.c    **** 
  50:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE BEGIN PV */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE END PV */
  55:Src/main.c    **** 
  56:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  57:Src/main.c    **** void SystemClock_Config(void);
  58:Src/main.c    **** /* USER CODE BEGIN PFP */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* USER CODE END PFP */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  63:Src/main.c    **** /* USER CODE BEGIN 0 */
  64:Src/main.c    **** void Delay(__IO uint32_t nCount)
  65:Src/main.c    **** {
  28              		.loc 1 65 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34 0000 82B0     		sub	sp, sp, #8
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37 0002 0190     		str	r0, [sp, #4]
  38              	.L2:
  66:Src/main.c    ****     while (nCount--);
  39              		.loc 1 66 0 discriminator 1
  40 0004 019B     		ldr	r3, [sp, #4]
  41 0006 5A1E     		subs	r2, r3, #1
  42 0008 0192     		str	r2, [sp, #4]
  43 000a 002B     		cmp	r3, #0
  44 000c FAD1     		bne	.L2
  67:Src/main.c    **** }
  45              		.loc 1 67 0
  46 000e 02B0     		add	sp, sp, #8
  47              	.LCFI1:
  48              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/cc9p6RLl.s 			page 3


  49              		@ sp needed
  50 0010 7047     		bx	lr
  51              		.cfi_endproc
  52              	.LFE140:
  54 0012 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
  55              		.align	2
  56              		.global	SystemClock_Config
  57              		.thumb
  58              		.thumb_func
  60              	SystemClock_Config:
  61              	.LFB142:
  68:Src/main.c    **** /* USER CODE END 0 */
  69:Src/main.c    **** 
  70:Src/main.c    **** /**
  71:Src/main.c    ****   * @brief  The application entry point.
  72:Src/main.c    ****   * @retval int
  73:Src/main.c    ****   */
  74:Src/main.c    **** int main(void)
  75:Src/main.c    **** {
  76:Src/main.c    ****   /* USER CODE BEGIN 1 */
  77:Src/main.c    **** 
  78:Src/main.c    ****   /* USER CODE END 1 */
  79:Src/main.c    ****   
  80:Src/main.c    **** 
  81:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  82:Src/main.c    **** 
  83:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  84:Src/main.c    ****   HAL_Init();
  85:Src/main.c    **** 
  86:Src/main.c    ****   /* USER CODE BEGIN Init */
  87:Src/main.c    **** 
  88:Src/main.c    ****   /* USER CODE END Init */
  89:Src/main.c    **** 
  90:Src/main.c    ****   /* Configure the system clock */
  91:Src/main.c    ****   SystemClock_Config();
  92:Src/main.c    **** 
  93:Src/main.c    ****   /* USER CODE BEGIN SysInit */
  94:Src/main.c    **** 
  95:Src/main.c    ****   /* USER CODE END SysInit */
  96:Src/main.c    **** 
  97:Src/main.c    ****   /* Initialize all configured peripherals */
  98:Src/main.c    ****   MX_GPIO_Init();
  99:Src/main.c    ****   MX_USART2_UART_Init();
 100:Src/main.c    ****   /* USER CODE BEGIN 2 */
 101:Src/main.c    ****   char *test = "I'm alive\n\r";
 102:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)test, strlen(test), 0xFFFF);
 103:Src/main.c    ****   
 104:Src/main.c    ****   for (int i = 0; i < 10; ++i) {
 105:Src/main.c    ****       char number[10];
 106:Src/main.c    ****       itoa(rand() % 1000, number, 10);
 107:Src/main.c    ****       number[strlen(number)+1] = 0;
 108:Src/main.c    ****       number[strlen(number)] = '\n';
 109:Src/main.c    ****       HAL_UART_Transmit(&huart2, (uint8_t*)number, strlen(number), 0xFFFF);
 110:Src/main.c    ****   }
 111:Src/main.c    ****   
 112:Src/main.c    ****   unsigned char *entropy;
 113:Src/main.c    ****   unsigned char *custom = "AAAAAAAAAAgigkhkhctdvgbjknhjnbvAAAAAAAAAAAAAAAAA";
ARM GAS  /tmp/cc9p6RLl.s 			page 4


 114:Src/main.c    ****   for (unsigned char i = 0; i < 48; ++i) {
 115:Src/main.c    ****       entropy[i] = i;
 116:Src/main.c    ****   }
 117:Src/main.c    ****   randombytes_init(entropy, custom, 1);
 118:Src/main.c    ****   
 119:Src/main.c    ****   char *PAIR = "\n\rGenerating keys...";
 120:Src/main.c    ****   char *ENC = "\n\rEncrypting...";
 121:Src/main.c    ****   char *DEC = "\n\rDecrypting...";
 122:Src/main.c    ****   char *SHOW_CTX = "\n\rCiphertext Encrypt(e, sk) is: ";
 123:Src/main.c    ****   char *SHOW_SS = "\n\rShared secret Hash(e) - or Hash(c.k) - is: ";
 124:Src/main.c    ****   char *ERR_PAIR = "\n\rError in keypair";
 125:Src/main.c    ****   char *ERR_ENC = "\n\rError in enc";
 126:Src/main.c    ****   char *ERR_DEC = "\n\rError in dec";
 127:Src/main.c    ****   int ans;
 128:Src/main.c    ****   
 129:Src/main.c    ****   unsigned char msg[CRYPTO_CIPHERTEXTBYTES] = "Hello Nucleo Fun!\n\r";
 130:Src/main.c    ****   unsigned char pk[CRYPTO_PUBLICKEYBYTES];
 131:Src/main.c    ****   unsigned char sk[CRYPTO_SECRETKEYBYTES];
 132:Src/main.c    ****   unsigned char ss[CRYPTO_BYTES];
 133:Src/main.c    ****   
 134:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)PAIR, strlen(PAIR), 0xFFFF);
 135:Src/main.c    ****   ans = crypto_kem_keypair(pk, sk);
 136:Src/main.c    ****   if (ans != 0) HAL_UART_Transmit(&huart2, (uint8_t*)ERR_PAIR, strlen(ERR_PAIR), 0xFFFF);
 137:Src/main.c    ****   
 138:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)ENC, strlen(ENC), 0xFFFF);
 139:Src/main.c    ****   ans = crypto_kem_enc(msg, ss, pk);
 140:Src/main.c    ****   if (ans != 0) HAL_UART_Transmit(&huart2, (uint8_t*)ERR_ENC, strlen(ERR_ENC), 0xFFFF);
 141:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SHOW_CTX, strlen(SHOW_CTX), 0xFFFF);
 142:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)msg, CRYPTO_CIPHERTEXTBYTES, 0xFFFF);
 143:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SHOW_SS, strlen(SHOW_SS), 0xFFFF);
 144:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)ss, CRYPTO_BYTES, 0xFFFF);
 145:Src/main.c    ****   
 146:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)DEC, strlen(DEC), 0xFFFF);
 147:Src/main.c    ****   ans = crypto_kem_dec(ss, msg, sk);
 148:Src/main.c    ****   if (ans != 0) HAL_UART_Transmit(&huart2, (uint8_t*)ERR_DEC, strlen(ERR_DEC), 0xFFFF);
 149:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SHOW_SS, strlen(SHOW_SS), 0xFFFF);
 150:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)ss, CRYPTO_BYTES, 0xFFFF);
 151:Src/main.c    ****   
 152:Src/main.c    ****   /* USER CODE END 2 */
 153:Src/main.c    **** 
 154:Src/main.c    ****   /* Infinite loop */
 155:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 156:Src/main.c    ****   while (1)
 157:Src/main.c    ****   {
 158:Src/main.c    ****     /* USER CODE END WHILE */
 159:Src/main.c    ****     HAL_GPIO_TogglePin(Ld2_GPIO_Port,Ld2_Pin); //Toggle LED
 160:Src/main.c    ****     HAL_Delay(1000); //Delay 1 Seconds
 161:Src/main.c    ****     /* USER CODE BEGIN 3 */
 162:Src/main.c    ****   }
 163:Src/main.c    ****   /* USER CODE END 3 */
 164:Src/main.c    **** }
 165:Src/main.c    **** 
 166:Src/main.c    **** /**
 167:Src/main.c    ****   * @brief System Clock Configuration
 168:Src/main.c    ****   * @retval None
 169:Src/main.c    ****   */
 170:Src/main.c    **** void SystemClock_Config(void)
ARM GAS  /tmp/cc9p6RLl.s 			page 5


 171:Src/main.c    **** {
  62              		.loc 1 171 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 80
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66 0000 30B5     		push	{r4, r5, lr}
  67              	.LCFI2:
  68              		.cfi_def_cfa_offset 12
  69              		.cfi_offset 4, -12
  70              		.cfi_offset 5, -8
  71              		.cfi_offset 14, -4
  72 0002 95B0     		sub	sp, sp, #84
  73              	.LCFI3:
  74              		.cfi_def_cfa_offset 96
 172:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  75              		.loc 1 172 0
  76 0004 0024     		movs	r4, #0
  77 0006 0794     		str	r4, [sp, #28]
  78 0008 0894     		str	r4, [sp, #32]
  79 000a 0994     		str	r4, [sp, #36]
  80 000c 0A94     		str	r4, [sp, #40]
  81 000e 0B94     		str	r4, [sp, #44]
  82 0010 0C94     		str	r4, [sp, #48]
  83 0012 0D94     		str	r4, [sp, #52]
  84 0014 0E94     		str	r4, [sp, #56]
  85 0016 0F94     		str	r4, [sp, #60]
  86 0018 1094     		str	r4, [sp, #64]
  87 001a 1194     		str	r4, [sp, #68]
  88 001c 1294     		str	r4, [sp, #72]
  89 001e 1394     		str	r4, [sp, #76]
 173:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  90              		.loc 1 173 0
  91 0020 0294     		str	r4, [sp, #8]
  92 0022 0394     		str	r4, [sp, #12]
  93 0024 0494     		str	r4, [sp, #16]
  94 0026 0594     		str	r4, [sp, #20]
  95 0028 0694     		str	r4, [sp, #24]
  96              	.LBB2:
 174:Src/main.c    **** 
 175:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 176:Src/main.c    ****   */
 177:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
  97              		.loc 1 177 0
  98 002a 0094     		str	r4, [sp]
  99 002c 1B4B     		ldr	r3, .L6
 100 002e 1A6C     		ldr	r2, [r3, #64]
 101 0030 42F08052 		orr	r2, r2, #268435456
 102 0034 1A64     		str	r2, [r3, #64]
 103 0036 1B6C     		ldr	r3, [r3, #64]
 104 0038 03F08053 		and	r3, r3, #268435456
 105 003c 0093     		str	r3, [sp]
 106 003e 009B     		ldr	r3, [sp]
 107              	.LBE2:
 108              	.LBB3:
 178:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 109              		.loc 1 178 0
 110 0040 0194     		str	r4, [sp, #4]
ARM GAS  /tmp/cc9p6RLl.s 			page 6


 111 0042 174A     		ldr	r2, .L6+4
 112 0044 1368     		ldr	r3, [r2]
 113 0046 23F44043 		bic	r3, r3, #49152
 114 004a 43F48043 		orr	r3, r3, #16384
 115 004e 1360     		str	r3, [r2]
 116 0050 1368     		ldr	r3, [r2]
 117 0052 03F44043 		and	r3, r3, #49152
 118 0056 0193     		str	r3, [sp, #4]
 119 0058 019B     		ldr	r3, [sp, #4]
 120              	.LBE3:
 179:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 180:Src/main.c    ****   */
 181:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 121              		.loc 1 181 0
 122 005a 0225     		movs	r5, #2
 123 005c 0795     		str	r5, [sp, #28]
 182:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 124              		.loc 1 182 0
 125 005e 0123     		movs	r3, #1
 126 0060 0A93     		str	r3, [sp, #40]
 183:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 127              		.loc 1 183 0
 128 0062 1023     		movs	r3, #16
 129 0064 0B93     		str	r3, [sp, #44]
 184:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 130              		.loc 1 184 0
 131 0066 0D95     		str	r5, [sp, #52]
 185:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 132              		.loc 1 185 0
 133 0068 0E94     		str	r4, [sp, #56]
 186:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 134              		.loc 1 186 0
 135 006a 0F93     		str	r3, [sp, #60]
 187:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 136              		.loc 1 187 0
 137 006c 4FF4A873 		mov	r3, #336
 138 0070 1093     		str	r3, [sp, #64]
 188:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 139              		.loc 1 188 0
 140 0072 0423     		movs	r3, #4
 141 0074 1193     		str	r3, [sp, #68]
 189:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 142              		.loc 1 189 0
 143 0076 1295     		str	r5, [sp, #72]
 190:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = 2;
 144              		.loc 1 190 0
 145 0078 1395     		str	r5, [sp, #76]
 191:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 146              		.loc 1 191 0
 147 007a 07A8     		add	r0, sp, #28
 148 007c FFF7FEFF 		bl	HAL_RCC_OscConfig
 149              	.LVL1:
 192:Src/main.c    ****   {
 193:Src/main.c    ****     Error_Handler();
 194:Src/main.c    ****   }
 195:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 196:Src/main.c    ****   */
ARM GAS  /tmp/cc9p6RLl.s 			page 7


 197:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 150              		.loc 1 197 0
 151 0080 0F23     		movs	r3, #15
 152 0082 0293     		str	r3, [sp, #8]
 198:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 199:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 153              		.loc 1 199 0
 154 0084 0395     		str	r5, [sp, #12]
 200:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 155              		.loc 1 200 0
 156 0086 0494     		str	r4, [sp, #16]
 201:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 157              		.loc 1 201 0
 158 0088 4FF48053 		mov	r3, #4096
 159 008c 0593     		str	r3, [sp, #20]
 202:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 160              		.loc 1 202 0
 161 008e 0694     		str	r4, [sp, #24]
 203:Src/main.c    **** 
 204:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 162              		.loc 1 204 0
 163 0090 02A8     		add	r0, sp, #8
 164 0092 2946     		mov	r1, r5
 165 0094 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 166              	.LVL2:
 205:Src/main.c    ****   {
 206:Src/main.c    ****     Error_Handler();
 207:Src/main.c    ****   }
 208:Src/main.c    **** }
 167              		.loc 1 208 0
 168 0098 15B0     		add	sp, sp, #84
 169              	.LCFI4:
 170              		.cfi_def_cfa_offset 12
 171              		@ sp needed
 172 009a 30BD     		pop	{r4, r5, pc}
 173              	.L7:
 174              		.align	2
 175              	.L6:
 176 009c 00380240 		.word	1073887232
 177 00a0 00700040 		.word	1073770496
 178              		.cfi_endproc
 179              	.LFE142:
 181              		.section	.text.main,"ax",%progbits
 182              		.align	2
 183              		.global	main
 184              		.thumb
 185              		.thumb_func
 187              	main:
 188              	.LFB141:
  75:Src/main.c    ****   /* USER CODE BEGIN 1 */
 189              		.loc 1 75 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 3808
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 193 0000 30B5     		push	{r4, r5, lr}
 194              	.LCFI5:
 195              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/cc9p6RLl.s 			page 8


 196              		.cfi_offset 4, -12
 197              		.cfi_offset 5, -8
 198              		.cfi_offset 14, -4
 199 0002 ADF6E46D 		subw	sp, sp, #3812
 200              	.LCFI6:
 201              		.cfi_def_cfa_offset 3824
  84:Src/main.c    **** 
 202              		.loc 1 84 0
 203 0006 FFF7FEFF 		bl	HAL_Init
 204              	.LVL3:
  91:Src/main.c    **** 
 205              		.loc 1 91 0
 206 000a FFF7FEFF 		bl	SystemClock_Config
 207              	.LVL4:
  98:Src/main.c    ****   MX_USART2_UART_Init();
 208              		.loc 1 98 0
 209 000e FFF7FEFF 		bl	MX_GPIO_Init
 210              	.LVL5:
  99:Src/main.c    ****   /* USER CODE BEGIN 2 */
 211              		.loc 1 99 0
 212 0012 FFF7FEFF 		bl	MX_USART2_UART_Init
 213              	.LVL6:
 102:Src/main.c    ****   
 214              		.loc 1 102 0
 215 0016 6048     		ldr	r0, .L18
 216 0018 6049     		ldr	r1, .L18+4
 217 001a 0B22     		movs	r2, #11
 218 001c 4FF6FF73 		movw	r3, #65535
 219 0020 FFF7FEFF 		bl	HAL_UART_Transmit
 220              	.LVL7:
 221              	.LBB4:
 104:Src/main.c    ****       char number[10];
 222              		.loc 1 104 0
 223 0024 0025     		movs	r5, #0
 224 0026 26E0     		b	.L9
 225              	.LVL8:
 226              	.L10:
 227              	.LBB5:
 106:Src/main.c    ****       number[strlen(number)+1] = 0;
 228              		.loc 1 106 0 discriminator 3
 229 0028 FFF7FEFF 		bl	rand
 230              	.LVL9:
 231 002c 5C4B     		ldr	r3, .L18+8
 232 002e 83FB0032 		smull	r3, r2, r3, r0
 233 0032 C317     		asrs	r3, r0, #31
 234 0034 C3EBA213 		rsb	r3, r3, r2, asr #6
 235 0038 01AC     		add	r4, sp, #4
 236 003a 4FF47A72 		mov	r2, #1000
 237 003e 02FB1300 		mls	r0, r2, r3, r0
 238 0042 2146     		mov	r1, r4
 239 0044 0A22     		movs	r2, #10
 240 0046 FFF7FEFF 		bl	itoa
 241              	.LVL10:
 107:Src/main.c    ****       number[strlen(number)] = '\n';
 242              		.loc 1 107 0 discriminator 3
 243 004a 2046     		mov	r0, r4
 244 004c FFF7FEFF 		bl	strlen
ARM GAS  /tmp/cc9p6RLl.s 			page 9


 245              	.LVL11:
 246 0050 0130     		adds	r0, r0, #1
 247 0052 0023     		movs	r3, #0
 248 0054 2354     		strb	r3, [r4, r0]
 108:Src/main.c    ****       HAL_UART_Transmit(&huart2, (uint8_t*)number, strlen(number), 0xFFFF);
 249              		.loc 1 108 0 discriminator 3
 250 0056 2046     		mov	r0, r4
 251 0058 FFF7FEFF 		bl	strlen
 252              	.LVL12:
 253 005c 0A23     		movs	r3, #10
 254 005e 2354     		strb	r3, [r4, r0]
 109:Src/main.c    ****   }
 255              		.loc 1 109 0 discriminator 3
 256 0060 2046     		mov	r0, r4
 257 0062 FFF7FEFF 		bl	strlen
 258              	.LVL13:
 259 0066 82B2     		uxth	r2, r0
 260 0068 4B48     		ldr	r0, .L18
 261 006a 2146     		mov	r1, r4
 262 006c 4FF6FF73 		movw	r3, #65535
 263 0070 FFF7FEFF 		bl	HAL_UART_Transmit
 264              	.LVL14:
 265              	.LBE5:
 104:Src/main.c    ****       char number[10];
 266              		.loc 1 104 0 discriminator 3
 267 0074 0135     		adds	r5, r5, #1
 268              	.LVL15:
 269              	.L9:
 104:Src/main.c    ****       char number[10];
 270              		.loc 1 104 0 is_stmt 0 discriminator 1
 271 0076 092D     		cmp	r5, #9
 272 0078 D6DD     		ble	.L10
 273 007a 0023     		movs	r3, #0
 274 007c 02E0     		b	.L11
 275              	.LVL16:
 276              	.L12:
 277              	.LBE4:
 278              	.LBB6:
 115:Src/main.c    ****   }
 279              		.loc 1 115 0 is_stmt 1 discriminator 3
 280 007e 1B70     		strb	r3, [r3]
 114:Src/main.c    ****       entropy[i] = i;
 281              		.loc 1 114 0 discriminator 3
 282 0080 0133     		adds	r3, r3, #1
 283              	.LVL17:
 284 0082 DBB2     		uxtb	r3, r3
 285              	.LVL18:
 286              	.L11:
 114:Src/main.c    ****       entropy[i] = i;
 287              		.loc 1 114 0 is_stmt 0 discriminator 1
 288 0084 2F2B     		cmp	r3, #47
 289 0086 FAD9     		bls	.L12
 290              	.LBE6:
 117:Src/main.c    ****   
 291              		.loc 1 117 0 is_stmt 1
 292 0088 0020     		movs	r0, #0
 293 008a 4649     		ldr	r1, .L18+12
ARM GAS  /tmp/cc9p6RLl.s 			page 10


 294 008c 0122     		movs	r2, #1
 295 008e FFF7FEFF 		bl	randombytes_init
 296              	.LVL19:
 129:Src/main.c    ****   unsigned char pk[CRYPTO_PUBLICKEYBYTES];
 297              		.loc 1 129 0
 298 0092 0DF29474 		addw	r4, sp, #1940
 299 0096 444D     		ldr	r5, .L18+16
 300              	.LVL20:
 301 0098 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 302 009a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 303 009c 2B68     		ldr	r3, [r5]
 304 009e 2360     		str	r3, [r4]
 305 00a0 0DF5F560 		add	r0, sp, #1960
 306 00a4 0021     		movs	r1, #0
 307 00a6 4FF4E762 		mov	r2, #1848
 308 00aa FFF7FEFF 		bl	memset
 309              	.LVL21:
 134:Src/main.c    ****   ans = crypto_kem_keypair(pk, sk);
 310              		.loc 1 134 0
 311 00ae 3A48     		ldr	r0, .L18
 312 00b0 3E49     		ldr	r1, .L18+20
 313 00b2 1422     		movs	r2, #20
 314 00b4 4FF6FF73 		movw	r3, #65535
 315 00b8 FFF7FEFF 		bl	HAL_UART_Transmit
 316              	.LVL22:
 135:Src/main.c    ****   if (ans != 0) HAL_UART_Transmit(&huart2, (uint8_t*)ERR_PAIR, strlen(ERR_PAIR), 0xFFFF);
 317              		.loc 1 135 0
 318 00bc 12A8     		add	r0, sp, #72
 319 00be 0CA9     		add	r1, sp, #48
 320 00c0 FFF7FEFF 		bl	crypto_kem_keypair
 321              	.LVL23:
 136:Src/main.c    ****   
 322              		.loc 1 136 0
 323 00c4 30B1     		cbz	r0, .L13
 136:Src/main.c    ****   
 324              		.loc 1 136 0 is_stmt 0 discriminator 1
 325 00c6 3448     		ldr	r0, .L18
 326              	.LVL24:
 327 00c8 3949     		ldr	r1, .L18+24
 328 00ca 1222     		movs	r2, #18
 329 00cc 4FF6FF73 		movw	r3, #65535
 330 00d0 FFF7FEFF 		bl	HAL_UART_Transmit
 331              	.LVL25:
 332              	.L13:
 138:Src/main.c    ****   ans = crypto_kem_enc(msg, ss, pk);
 333              		.loc 1 138 0 is_stmt 1
 334 00d4 3048     		ldr	r0, .L18
 335 00d6 3749     		ldr	r1, .L18+28
 336 00d8 0F22     		movs	r2, #15
 337 00da 4FF6FF73 		movw	r3, #65535
 338 00de FFF7FEFF 		bl	HAL_UART_Transmit
 339              	.LVL26:
 139:Src/main.c    ****   if (ans != 0) HAL_UART_Transmit(&huart2, (uint8_t*)ERR_ENC, strlen(ERR_ENC), 0xFFFF);
 340              		.loc 1 139 0
 341 00e2 0DF29470 		addw	r0, sp, #1940
 342 00e6 04A9     		add	r1, sp, #16
 343 00e8 12AA     		add	r2, sp, #72
ARM GAS  /tmp/cc9p6RLl.s 			page 11


 344 00ea FFF7FEFF 		bl	crypto_kem_enc
 345              	.LVL27:
 140:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SHOW_CTX, strlen(SHOW_CTX), 0xFFFF);
 346              		.loc 1 140 0
 347 00ee 30B1     		cbz	r0, .L14
 140:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SHOW_CTX, strlen(SHOW_CTX), 0xFFFF);
 348              		.loc 1 140 0 is_stmt 0 discriminator 1
 349 00f0 2948     		ldr	r0, .L18
 350              	.LVL28:
 351 00f2 3149     		ldr	r1, .L18+32
 352 00f4 0E22     		movs	r2, #14
 353 00f6 4FF6FF73 		movw	r3, #65535
 354 00fa FFF7FEFF 		bl	HAL_UART_Transmit
 355              	.LVL29:
 356              	.L14:
 141:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)msg, CRYPTO_CIPHERTEXTBYTES, 0xFFFF);
 357              		.loc 1 141 0 is_stmt 1
 358 00fe 264C     		ldr	r4, .L18
 359 0100 2046     		mov	r0, r4
 360 0102 2E49     		ldr	r1, .L18+36
 361 0104 2022     		movs	r2, #32
 362 0106 4FF6FF73 		movw	r3, #65535
 363 010a FFF7FEFF 		bl	HAL_UART_Transmit
 364              	.LVL30:
 142:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SHOW_SS, strlen(SHOW_SS), 0xFFFF);
 365              		.loc 1 142 0
 366 010e 2046     		mov	r0, r4
 367 0110 0DF29471 		addw	r1, sp, #1940
 368 0114 40F24C72 		movw	r2, #1868
 369 0118 4FF6FF73 		movw	r3, #65535
 370 011c FFF7FEFF 		bl	HAL_UART_Transmit
 371              	.LVL31:
 143:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)ss, CRYPTO_BYTES, 0xFFFF);
 372              		.loc 1 143 0
 373 0120 2046     		mov	r0, r4
 374 0122 2749     		ldr	r1, .L18+40
 375 0124 2D22     		movs	r2, #45
 376 0126 4FF6FF73 		movw	r3, #65535
 377 012a FFF7FEFF 		bl	HAL_UART_Transmit
 378              	.LVL32:
 144:Src/main.c    ****   
 379              		.loc 1 144 0
 380 012e 2046     		mov	r0, r4
 381 0130 04A9     		add	r1, sp, #16
 382 0132 2022     		movs	r2, #32
 383 0134 4FF6FF73 		movw	r3, #65535
 384 0138 FFF7FEFF 		bl	HAL_UART_Transmit
 385              	.LVL33:
 146:Src/main.c    ****   ans = crypto_kem_dec(ss, msg, sk);
 386              		.loc 1 146 0
 387 013c 2046     		mov	r0, r4
 388 013e 2149     		ldr	r1, .L18+44
 389 0140 0F22     		movs	r2, #15
 390 0142 4FF6FF73 		movw	r3, #65535
 391 0146 FFF7FEFF 		bl	HAL_UART_Transmit
 392              	.LVL34:
 147:Src/main.c    ****   if (ans != 0) HAL_UART_Transmit(&huart2, (uint8_t*)ERR_DEC, strlen(ERR_DEC), 0xFFFF);
ARM GAS  /tmp/cc9p6RLl.s 			page 12


 393              		.loc 1 147 0
 394 014a 04A8     		add	r0, sp, #16
 395 014c 0DF29471 		addw	r1, sp, #1940
 396 0150 0CAA     		add	r2, sp, #48
 397 0152 FFF7FEFF 		bl	crypto_kem_dec
 398              	.LVL35:
 148:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SHOW_SS, strlen(SHOW_SS), 0xFFFF);
 399              		.loc 1 148 0
 400 0156 30B1     		cbz	r0, .L15
 148:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SHOW_SS, strlen(SHOW_SS), 0xFFFF);
 401              		.loc 1 148 0 is_stmt 0 discriminator 1
 402 0158 2046     		mov	r0, r4
 403              	.LVL36:
 404 015a 1B49     		ldr	r1, .L18+48
 405 015c 0E22     		movs	r2, #14
 406 015e 4FF6FF73 		movw	r3, #65535
 407 0162 FFF7FEFF 		bl	HAL_UART_Transmit
 408              	.LVL37:
 409              	.L15:
 149:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)ss, CRYPTO_BYTES, 0xFFFF);
 410              		.loc 1 149 0 is_stmt 1
 411 0166 0C4C     		ldr	r4, .L18
 412 0168 2046     		mov	r0, r4
 413 016a 1549     		ldr	r1, .L18+40
 414 016c 2D22     		movs	r2, #45
 415 016e 4FF6FF73 		movw	r3, #65535
 416 0172 FFF7FEFF 		bl	HAL_UART_Transmit
 417              	.LVL38:
 150:Src/main.c    ****   
 418              		.loc 1 150 0
 419 0176 2046     		mov	r0, r4
 420 0178 04A9     		add	r1, sp, #16
 421 017a 2022     		movs	r2, #32
 422 017c 4FF6FF73 		movw	r3, #65535
 423 0180 FFF7FEFF 		bl	HAL_UART_Transmit
 424              	.LVL39:
 425              	.L16:
 159:Src/main.c    ****     HAL_Delay(1000); //Delay 1 Seconds
 426              		.loc 1 159 0 discriminator 1
 427 0184 1148     		ldr	r0, .L18+52
 428 0186 2021     		movs	r1, #32
 429 0188 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 430              	.LVL40:
 160:Src/main.c    ****     /* USER CODE BEGIN 3 */
 431              		.loc 1 160 0 discriminator 1
 432 018c 4FF47A70 		mov	r0, #1000
 433 0190 FFF7FEFF 		bl	HAL_Delay
 434              	.LVL41:
 162:Src/main.c    ****   /* USER CODE END 3 */
 435              		.loc 1 162 0 discriminator 1
 436 0194 F6E7     		b	.L16
 437              	.L19:
 438 0196 00BF     		.align	2
 439              	.L18:
 440 0198 00000000 		.word	huart2
 441 019c 00000000 		.word	.LC0
 442 01a0 D34D6210 		.word	274877907
ARM GAS  /tmp/cc9p6RLl.s 			page 13


 443 01a4 0C000000 		.word	.LC1
 444 01a8 00000000 		.word	.LANCHOR0
 445 01ac 40000000 		.word	.LC3
 446 01b0 58000000 		.word	.LC4
 447 01b4 6C000000 		.word	.LC5
 448 01b8 7C000000 		.word	.LC6
 449 01bc 8C000000 		.word	.LC7
 450 01c0 B0000000 		.word	.LC8
 451 01c4 E0000000 		.word	.LC9
 452 01c8 F0000000 		.word	.LC10
 453 01cc 00000240 		.word	1073872896
 454              		.cfi_endproc
 455              	.LFE141:
 457              		.section	.text.Error_Handler,"ax",%progbits
 458              		.align	2
 459              		.global	Error_Handler
 460              		.thumb
 461              		.thumb_func
 463              	Error_Handler:
 464              	.LFB143:
 209:Src/main.c    **** 
 210:Src/main.c    **** /* USER CODE BEGIN 4 */
 211:Src/main.c    **** 
 212:Src/main.c    **** /* USER CODE END 4 */
 213:Src/main.c    **** 
 214:Src/main.c    **** /**
 215:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 216:Src/main.c    ****   * @retval None
 217:Src/main.c    ****   */
 218:Src/main.c    **** void Error_Handler(void)
 219:Src/main.c    **** {
 465              		.loc 1 219 0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 0
 468              		@ frame_needed = 0, uses_anonymous_args = 0
 469              		@ link register save eliminated.
 470 0000 7047     		bx	lr
 471              		.cfi_endproc
 472              	.LFE143:
 474 0002 00BF     		.section	.rodata
 475              		.align	2
 476              		.set	.LANCHOR0,. + 0
 477              	.LC2:
 478 0000 48656C6C 		.ascii	"Hello Nucleo Fun!\012\015\000"
 478      6F204E75 
 478      636C656F 
 478      2046756E 
 478      210A0D00 
 479 0014 00000000 		.space	1848
 479      00000000 
 479      00000000 
 479      00000000 
 479      00000000 
 480              		.section	.rodata.str1.4,"aMS",%progbits,1
 481              		.align	2
 482              	.LC0:
 483 0000 49276D20 		.ascii	"I'm alive\012\015\000"
ARM GAS  /tmp/cc9p6RLl.s 			page 14


 483      616C6976 
 483      650A0D00 
 484              	.LC1:
 485 000c 41414141 		.ascii	"AAAAAAAAAAgigkhkhctdvgbjknhjnbvAAAAAAAAAAAAAAAAA\000"
 485      41414141 
 485      41416769 
 485      676B686B 
 485      68637464 
 486 003d 000000   		.space	3
 487              	.LC3:
 488 0040 0A0D4765 		.ascii	"\012\015Generating keys...\000"
 488      6E657261 
 488      74696E67 
 488      206B6579 
 488      732E2E2E 
 489 0055 000000   		.space	3
 490              	.LC4:
 491 0058 0A0D4572 		.ascii	"\012\015Error in keypair\000"
 491      726F7220 
 491      696E206B 
 491      65797061 
 491      697200
 492 006b 00       		.space	1
 493              	.LC5:
 494 006c 0A0D456E 		.ascii	"\012\015Encrypting...\000"
 494      63727970 
 494      74696E67 
 494      2E2E2E00 
 495              	.LC6:
 496 007c 0A0D4572 		.ascii	"\012\015Error in enc\000"
 496      726F7220 
 496      696E2065 
 496      6E6300
 497 008b 00       		.space	1
 498              	.LC7:
 499 008c 0A0D4369 		.ascii	"\012\015Ciphertext Encrypt(e, sk) is: \000"
 499      70686572 
 499      74657874 
 499      20456E63 
 499      72797074 
 500 00ad 000000   		.space	3
 501              	.LC8:
 502 00b0 0A0D5368 		.ascii	"\012\015Shared secret Hash(e) - or Hash(c.k) - is: "
 502      61726564 
 502      20736563 
 502      72657420 
 502      48617368 
 503 00dd 00       		.ascii	"\000"
 504 00de 0000     		.space	2
 505              	.LC9:
 506 00e0 0A0D4465 		.ascii	"\012\015Decrypting...\000"
 506      63727970 
 506      74696E67 
 506      2E2E2E00 
 507              	.LC10:
 508 00f0 0A0D4572 		.ascii	"\012\015Error in dec\000"
 508      726F7220 
ARM GAS  /tmp/cc9p6RLl.s 			page 15


 508      696E2064 
 508      656300
 509              		.text
 510              	.Letext0:
 511              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 512              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 513              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 514              		.file 5 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h"
 515              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 516              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 517              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 518              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 519              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 520              		.file 11 "Inc/qc_ldpc_parameters.h"
 521              		.file 12 "Drivers/CMSIS/Include/core_cm4.h"
 522              		.file 13 "Inc/usart.h"
 523              		.file 14 "/usr/include/newlib/string.h"
 524              		.file 15 "/usr/include/newlib/stdlib.h"
 525              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 526              		.file 17 "Inc/gpio.h"
 527              		.file 18 "Inc/rng.h"
 528              		.file 19 "Inc/api.h"
 529              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
ARM GAS  /tmp/cc9p6RLl.s 			page 16


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc9p6RLl.s:20     .text.Delay:0000000000000000 $t
     /tmp/cc9p6RLl.s:25     .text.Delay:0000000000000000 Delay
     /tmp/cc9p6RLl.s:55     .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc9p6RLl.s:60     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc9p6RLl.s:176    .text.SystemClock_Config:000000000000009c $d
     /tmp/cc9p6RLl.s:182    .text.main:0000000000000000 $t
     /tmp/cc9p6RLl.s:187    .text.main:0000000000000000 main
     /tmp/cc9p6RLl.s:440    .text.main:0000000000000198 $d
     /tmp/cc9p6RLl.s:458    .text.Error_Handler:0000000000000000 $t
     /tmp/cc9p6RLl.s:463    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc9p6RLl.s:475    .rodata:0000000000000000 $d
     /tmp/cc9p6RLl.s:481    .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.20963d46ba5d8e371b8630ece00f11ec
                           .group:0000000000000000 wm4.stm32f4xx_hal_conf.h.24.d14dd899dbfa16d6dc9a7b8d5f0b81d2
                           .group:0000000000000000 wm4.stm32f4xx.h.55.8c995fbadbb7a126747b547eb8ec7b5b
                           .group:0000000000000000 wm4.stm32f446xx.h.51.16a9122ede9860ebbb552c9e423d1ecd
                           .group:0000000000000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:0000000000000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:0000000000000000 wm4._intsup.h.10.35a45952db64d30146faa63a55c20c1c
                           .group:0000000000000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:0000000000000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:0000000000000000 wm4.cmsis_version.h.32.4d5822004c01a829a975260e854b5f8e
                           .group:0000000000000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.f42444deefab66ffa141b9b9fddb57a3
                           .group:0000000000000000 wm4.core_cm4.h.174.059a5e001a9e729091d1407208e93224
                           .group:0000000000000000 wm4.mpu_armv7.h.32.27b4593cb2f8d3152ca5d97a9d72b321
                           .group:0000000000000000 wm4.stm32f446xx.h.934.bc7ea77f64b5be5f795628ebc7fc6b73
                           .group:0000000000000000 wm4.stm32f4xx.h.212.729f0f890654645a3f47ccc0cc2b00e7
                           .group:0000000000000000 wm4.stm32_hal_legacy.h.23.ef4988de22c7a2f0806a94b08b5606e0
                           .group:0000000000000000 wm4.stddef.h.39.c744ceb84abf2f8351653f0e2622da1c
                           .group:0000000000000000 wm4.stm32f4xx_hal_def.h.58.2d2c85d5b9693a63e90566b806e8a752
                           .group:0000000000000000 wm4.stm32f4xx_hal_rcc_ex.h.22.ed8712e28628f6d35bd6f8847ee2f18f
                           .group:0000000000000000 wm4.stm32f4xx_hal_rcc.h.108.0c18a3cfc2dd91bdf92470b4bd0ea1b5
                           .group:0000000000000000 wm4.stm32f4xx_hal_exti.h.22.66e33df8a935c9f8e1682d5515a6c09a
                           .group:0000000000000000 wm4.stm32f4xx_hal_gpio.h.22.be2c6bcf9722096ea8f49a41bf6aa50c
                           .group:0000000000000000 wm4.stm32f4xx_hal_gpio_ex.h.22.6858f59ca8a52c645189c74569e4d5b8
                           .group:0000000000000000 wm4.stm32f4xx_hal_gpio.h.264.528537eb92c2ec5c1cd9dfb4d255d1da
                           .group:0000000000000000 wm4.stm32f4xx_hal_dma.h.22.fffce20ac9119c50557659c75e75ab1c
                           .group:0000000000000000 wm4.stm32f4xx_hal_dma.h.721.a1e57ffbc615f926e6509c5acc65e492
                           .group:0000000000000000 wm4.stm32f4xx_hal_cortex.h.22.e6aa3b847b5388be63c32d1f9e696ef7
                           .group:0000000000000000 wm4.stm32f4xx_hal_flash.h.22.31b301be2655c3eb8583e51c8231544a
                           .group:0000000000000000 wm4.stm32f4xx_hal_flash_ex.h.22.df74a74dd40656a7fcd7d90cedd190b4
                           .group:0000000000000000 wm4.stm32f4xx_hal_flash.h.363.51efdf0f6c88f683efb89d7cc95cc1be
                           .group:0000000000000000 wm4.stm32f4xx_hal_pwr.h.22.2c27d93ae187efe3a73816f03a329970
                           .group:0000000000000000 wm4.stm32f4xx_hal_pwr_ex.h.22.cf49f655fb514fa1eda6a251fa1b2f1a
                           .group:0000000000000000 wm4.stm32f4xx_hal_pwr.h.337.60b43975c84527a23cb6994b23165a5e
                           .group:0000000000000000 wm4.stm32f4xx_hal_uart.h.22.2b47c8130d845b927904837c0b2264ce
                           .group:0000000000000000 wm4.stm32f4xx_hal.h.72.a5a58188aa461a0614f1e58e159c7840
                           .group:0000000000000000 wm4.main.h.61.f713c471afe2510354bc6b2444b9b417
                           .group:0000000000000000 wm4.newlib.h.8.2702bca278809460f0af6fba1d84eb68
                           .group:0000000000000000 wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff
                           .group:0000000000000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:0000000000000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:0000000000000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
ARM GAS  /tmp/cc9p6RLl.s 			page 17


                           .group:0000000000000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:0000000000000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:0000000000000000 wm4.cdefs.h.47.55832cb26e4a21cedaa9b1b3b922c6b1
                           .group:0000000000000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:0000000000000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:0000000000000000 wm4.time.h.8.2930fe070f4a8096b07db9159698c8e3
                           .group:0000000000000000 wm4.time.h.2.4581ce0ffb6627cfc02162c94bf846c9
                           .group:0000000000000000 wm4.time.h.24.3660bbb2d0a4c7457ff52ba3ada4c166
                           .group:0000000000000000 wm4.types.h.24.b2be5f53932a9c9d07787288b29b6d75
                           .group:0000000000000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:0000000000000000 wm4.types.h.82.82b71f3f44c70e3a459d0f66642b05eb
                           .group:0000000000000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:0000000000000000 wm4.time.h.217.2f437ac2cf06537c84703833b0977905
                           .group:0000000000000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:0000000000000000 wm4.stdlib.h.54.4fb06e985dc2cdf07f3ef03d3ed01397
                           .group:0000000000000000 wm4.stdio.h.27.3fc80220048df77954e38daec3bb9670
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:0000000000000000 wm4.stdio.h.68.ff6d7571d3ad75c55f15e26dbaa81e35
                           .group:0000000000000000 wm4.qc_ldpc_parameters.h.37.6a7dc7a81c3b4c6a57df61d48c0f4546
                           .group:0000000000000000 wm4.inttypes.h.14.d76379e1484484ef6b6b246cc782d8dc
                           .group:0000000000000000 wm4.inttypes.h.23.73ff1ea04b6018cd02b26f6fdc94fae9
                           .group:0000000000000000 wm4.limits.h.25.5fc8418077d2a1b3fdafee07d2348450
                           .group:0000000000000000 wm4.gf2x_limbs.h.44.4ba8ea293ca87ae1eb808c65b3f7859c
                           .group:0000000000000000 wm4.gf2x_arith.h.78.84d3114adf056aa03d6e1720f5f09797
                           .group:0000000000000000 wm4.rng.h.43.d878a412a37b8758e9c11dbf27ed5812
                           .group:0000000000000000 wm4.gf2x_arith_mod_xPplusOne.h.43.dd456d3b85305b5c168d761e87b26291
                           .group:0000000000000000 wm4.api.h.39.461facc9facebdb29c71caf95c7c4c98

UNDEFINED SYMBOLS
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_USART2_UART_Init
HAL_UART_Transmit
rand
itoa
strlen
randombytes_init
memset
crypto_kem_keypair
crypto_kem_enc
crypto_kem_dec
HAL_GPIO_TogglePin
HAL_Delay
huart2
