ARM GAS  /tmp/ccYSSKRz.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.Delay,"ax",%progbits
  20              		.align	2
  21              		.global	Delay
  22              		.thumb
  23              		.thumb_func
  25              	Delay:
  26              	.LFB140:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "usart.h"
  24:Src/main.c    **** #include "gpio.h"
  25:Src/main.c    **** 
  26:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  27:Src/main.c    **** /* USER CODE BEGIN Includes */
  28:Src/main.c    **** #include <string.h>
  29:Src/main.c    **** #include <time.h>
  30:Src/main.c    **** #include <stdlib.h>
  31:Src/main.c    **** #include <stdio.h>
ARM GAS  /tmp/ccYSSKRz.s 			page 2


  32:Src/main.c    **** #include "api.h"
  33:Src/main.c    **** /* USER CODE END Includes */
  34:Src/main.c    **** 
  35:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  36:Src/main.c    **** /* USER CODE BEGIN PTD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* USER CODE END PTD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PD */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE END PD */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  46:Src/main.c    **** /* USER CODE BEGIN PM */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE END PM */
  49:Src/main.c    **** 
  50:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE BEGIN PV */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE END PV */
  55:Src/main.c    **** 
  56:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  57:Src/main.c    **** void SystemClock_Config(void);
  58:Src/main.c    **** /* USER CODE BEGIN PFP */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* USER CODE END PFP */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  63:Src/main.c    **** /* USER CODE BEGIN 0 */
  64:Src/main.c    **** void Delay(__IO uint32_t nCount)
  65:Src/main.c    **** {
  28              		.loc 1 65 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34 0000 82B0     		sub	sp, sp, #8
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37 0002 0190     		str	r0, [sp, #4]
  38              	.L2:
  66:Src/main.c    ****     while (nCount--);
  39              		.loc 1 66 0 discriminator 1
  40 0004 019B     		ldr	r3, [sp, #4]
  41 0006 5A1E     		subs	r2, r3, #1
  42 0008 0192     		str	r2, [sp, #4]
  43 000a 002B     		cmp	r3, #0
  44 000c FAD1     		bne	.L2
  67:Src/main.c    **** }
  45              		.loc 1 67 0
  46 000e 02B0     		add	sp, sp, #8
  47              	.LCFI1:
  48              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccYSSKRz.s 			page 3


  49              		@ sp needed
  50 0010 7047     		bx	lr
  51              		.cfi_endproc
  52              	.LFE140:
  54 0012 00BF     		.section	.text.printBytes,"ax",%progbits
  55              		.align	2
  56              		.global	printBytes
  57              		.thumb
  58              		.thumb_func
  60              	printBytes:
  61              	.LFB141:
  68:Src/main.c    **** 
  69:Src/main.c    **** // print array of bytes in hex
  70:Src/main.c    **** void printBytes(unsigned char *data, int length) {
  62              		.loc 1 70 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 16
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              	.LVL1:
  67 0000 70B5     		push	{r4, r5, r6, lr}
  68              	.LCFI2:
  69              		.cfi_def_cfa_offset 16
  70              		.cfi_offset 4, -16
  71              		.cfi_offset 5, -12
  72              		.cfi_offset 6, -8
  73              		.cfi_offset 14, -4
  74 0002 84B0     		sub	sp, sp, #16
  75              	.LCFI3:
  76              		.cfi_def_cfa_offset 32
  77 0004 0646     		mov	r6, r0
  78 0006 0D46     		mov	r5, r1
  79              	.LVL2:
  71:Src/main.c    ****     char buffer[16];
  72:Src/main.c    ****     int i;
  73:Src/main.c    ****     for (i = 0; i < length; ++i) {
  80              		.loc 1 73 0
  81 0008 0024     		movs	r4, #0
  82 000a 0CE0     		b	.L5
  83              	.LVL3:
  84              	.L6:
  74:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%02x", data[i]), 0xFFFFFF);
  85              		.loc 1 74 0 discriminator 3
  86 000c 6846     		mov	r0, sp
  87 000e 0849     		ldr	r1, .L8
  88 0010 325D     		ldrb	r2, [r6, r4]	@ zero_extendqisi2
  89 0012 FFF7FEFF 		bl	sprintf
  90              	.LVL4:
  91 0016 82B2     		uxth	r2, r0
  92 0018 0648     		ldr	r0, .L8+4
  93 001a 6946     		mov	r1, sp
  94 001c 6FF07F43 		mvn	r3, #-16777216
  95 0020 FFF7FEFF 		bl	HAL_UART_Transmit
  96              	.LVL5:
  73:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%02x", data[i]), 0xFFFFFF);
  97              		.loc 1 73 0 discriminator 3
  98 0024 0134     		adds	r4, r4, #1
  99              	.LVL6:
ARM GAS  /tmp/ccYSSKRz.s 			page 4


 100              	.L5:
  73:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%02x", data[i]), 0xFFFFFF);
 101              		.loc 1 73 0 is_stmt 0 discriminator 1
 102 0026 AC42     		cmp	r4, r5
 103 0028 F0DB     		blt	.L6
  75:Src/main.c    ****     }
  76:Src/main.c    **** }
 104              		.loc 1 76 0 is_stmt 1
 105 002a 04B0     		add	sp, sp, #16
 106              	.LCFI4:
 107              		.cfi_def_cfa_offset 16
 108              		@ sp needed
 109 002c 70BD     		pop	{r4, r5, r6, pc}
 110              	.LVL7:
 111              	.L9:
 112 002e 00BF     		.align	2
 113              	.L8:
 114 0030 00000000 		.word	.LC0
 115 0034 00000000 		.word	huart2
 116              		.cfi_endproc
 117              	.LFE141:
 119              		.section	.text.printBytesKAT,"ax",%progbits
 120              		.align	2
 121              		.global	printBytesKAT
 122              		.thumb
 123              		.thumb_func
 125              	printBytesKAT:
 126              	.LFB142:
  77:Src/main.c    **** 
  78:Src/main.c    **** // print array of bytes in a KAT-compliant way...
  79:Src/main.c    **** void printBytesKAT(unsigned char *data, int length) {
 127              		.loc 1 79 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 32
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131              	.LVL8:
 132 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 133              	.LCFI5:
 134              		.cfi_def_cfa_offset 24
 135              		.cfi_offset 4, -24
 136              		.cfi_offset 5, -20
 137              		.cfi_offset 6, -16
 138              		.cfi_offset 7, -12
 139              		.cfi_offset 8, -8
 140              		.cfi_offset 14, -4
 141 0004 88B0     		sub	sp, sp, #32
 142              	.LCFI6:
 143              		.cfi_def_cfa_offset 56
 144 0006 0646     		mov	r6, r0
 145 0008 8846     		mov	r8, r1
  80:Src/main.c    ****     char zeros[9] = "00000000";
 146              		.loc 1 80 0
 147 000a 1E4A     		ldr	r2, .L20
 148 000c 05AB     		add	r3, sp, #20
 149 000e 07CA     		ldmia	r2, {r0, r1, r2}
 150              	.LVL9:
 151 0010 03C3     		stmia	r3!, {r0, r1}
ARM GAS  /tmp/ccYSSKRz.s 			page 5


 152 0012 1A70     		strb	r2, [r3]
 153              	.LVL10:
 154              	.LBB2:
  81:Src/main.c    ****     char buffer[16];
  82:Src/main.c    ****     
  83:Src/main.c    ****     for (int i = 0; i < 4; ++i) {
 155              		.loc 1 83 0
 156 0014 0024     		movs	r4, #0
 157 0016 0CE0     		b	.L11
 158              	.LVL11:
 159              	.L12:
  84:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%02x", data[i]), 0xFFFFFF);
 160              		.loc 1 84 0 discriminator 3
 161 0018 01A8     		add	r0, sp, #4
 162 001a 1B49     		ldr	r1, .L20+4
 163 001c 325D     		ldrb	r2, [r6, r4]	@ zero_extendqisi2
 164 001e FFF7FEFF 		bl	sprintf
 165              	.LVL12:
 166 0022 82B2     		uxth	r2, r0
 167 0024 1948     		ldr	r0, .L20+8
 168 0026 01A9     		add	r1, sp, #4
 169 0028 6FF07F43 		mvn	r3, #-16777216
 170 002c FFF7FEFF 		bl	HAL_UART_Transmit
 171              	.LVL13:
  83:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%02x", data[i]), 0xFFFFFF);
 172              		.loc 1 83 0 discriminator 3
 173 0030 0134     		adds	r4, r4, #1
 174              	.LVL14:
 175              	.L11:
  83:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%02x", data[i]), 0xFFFFFF);
 176              		.loc 1 83 0 is_stmt 0 discriminator 1
 177 0032 032C     		cmp	r4, #3
 178 0034 F0DD     		ble	.L12
 179              	.LBE2:
  85:Src/main.c    ****     }
  86:Src/main.c    ****     HAL_UART_Transmit(&huart2, zeros, 8, 0xFFFFFF);
 180              		.loc 1 86 0 is_stmt 1
 181 0036 1548     		ldr	r0, .L20+8
 182 0038 05A9     		add	r1, sp, #20
 183 003a 0822     		movs	r2, #8
 184 003c 6FF07F43 		mvn	r3, #-16777216
 185 0040 FFF7FEFF 		bl	HAL_UART_Transmit
 186              	.LVL15:
  87:Src/main.c    ****     
  88:Src/main.c    ****     int swap = 0;
  89:Src/main.c    ****     int i = 8;
 187              		.loc 1 89 0
 188 0044 0825     		movs	r5, #8
  88:Src/main.c    ****     int i = 8;
 189              		.loc 1 88 0
 190 0046 0027     		movs	r7, #0
  90:Src/main.c    ****     while (i < length) {
 191              		.loc 1 90 0
 192 0048 17E0     		b	.L13
 193              	.LVL16:
 194              	.L14:
 195              	.LBB3:
ARM GAS  /tmp/ccYSSKRz.s 			page 6


  91:Src/main.c    ****         for (int j = 0; j < 4; ++j) {
  92:Src/main.c    ****             HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%02x", data[i+j]), 0xFFFF
 196              		.loc 1 92 0 discriminator 3
 197 004a 2B19     		adds	r3, r5, r4
 198 004c 01A8     		add	r0, sp, #4
 199 004e 0E49     		ldr	r1, .L20+4
 200 0050 F25C     		ldrb	r2, [r6, r3]	@ zero_extendqisi2
 201 0052 FFF7FEFF 		bl	sprintf
 202              	.LVL17:
 203 0056 82B2     		uxth	r2, r0
 204 0058 0C48     		ldr	r0, .L20+8
 205 005a 01A9     		add	r1, sp, #4
 206 005c 6FF07F43 		mvn	r3, #-16777216
 207 0060 FFF7FEFF 		bl	HAL_UART_Transmit
 208              	.LVL18:
  91:Src/main.c    ****         for (int j = 0; j < 4; ++j) {
 209              		.loc 1 91 0 discriminator 3
 210 0064 0134     		adds	r4, r4, #1
 211              	.LVL19:
 212 0066 00E0     		b	.L17
 213              	.LVL20:
 214              	.L18:
 215              	.LBE3:
 216 0068 0024     		movs	r4, #0
 217              	.L17:
 218              	.LVL21:
 219              	.LBB4:
  91:Src/main.c    ****         for (int j = 0; j < 4; ++j) {
 220              		.loc 1 91 0 is_stmt 0 discriminator 1
 221 006a 032C     		cmp	r4, #3
 222 006c EDDD     		ble	.L14
 223              	.LBE4:
  93:Src/main.c    ****         }
  94:Src/main.c    ****         
  95:Src/main.c    ****         if (swap) {
 224              		.loc 1 95 0 is_stmt 1
 225 006e 17B1     		cbz	r7, .L15
  96:Src/main.c    ****             i += 12;
 226              		.loc 1 96 0
 227 0070 0C35     		adds	r5, r5, #12
 228              	.LVL22:
  97:Src/main.c    ****             swap = 0;
 229              		.loc 1 97 0
 230 0072 0027     		movs	r7, #0
 231 0074 01E0     		b	.L13
 232              	.LVL23:
 233              	.L15:
  98:Src/main.c    ****         } else {
  99:Src/main.c    ****             i -= 4;
 234              		.loc 1 99 0
 235 0076 043D     		subs	r5, r5, #4
 236              	.LVL24:
 100:Src/main.c    ****             swap = 1;
 237              		.loc 1 100 0
 238 0078 0127     		movs	r7, #1
 239              	.LVL25:
 240              	.L13:
ARM GAS  /tmp/ccYSSKRz.s 			page 7


  90:Src/main.c    ****         for (int j = 0; j < 4; ++j) {
 241              		.loc 1 90 0
 242 007a 4545     		cmp	r5, r8
 243 007c F4DB     		blt	.L18
 101:Src/main.c    ****         }
 102:Src/main.c    ****     }
 103:Src/main.c    **** }
 244              		.loc 1 103 0
 245 007e 08B0     		add	sp, sp, #32
 246              	.LCFI7:
 247              		.cfi_def_cfa_offset 24
 248              		@ sp needed
 249 0080 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 250              	.LVL26:
 251              	.L21:
 252              		.align	2
 253              	.L20:
 254 0084 08000000 		.word	.LC1
 255 0088 00000000 		.word	.LC0
 256 008c 00000000 		.word	huart2
 257              		.cfi_endproc
 258              	.LFE142:
 260              		.section	.text.SystemClock_Config,"ax",%progbits
 261              		.align	2
 262              		.global	SystemClock_Config
 263              		.thumb
 264              		.thumb_func
 266              	SystemClock_Config:
 267              	.LFB144:
 104:Src/main.c    **** 
 105:Src/main.c    **** /* USER CODE END 0 */
 106:Src/main.c    **** 
 107:Src/main.c    **** /**
 108:Src/main.c    ****   * @brief  The application entry point.
 109:Src/main.c    ****   * @retval int
 110:Src/main.c    ****   */
 111:Src/main.c    **** int main(void)
 112:Src/main.c    **** {
 113:Src/main.c    ****   /* USER CODE BEGIN 1 */
 114:Src/main.c    **** 
 115:Src/main.c    ****   /* USER CODE END 1 */
 116:Src/main.c    ****   
 117:Src/main.c    **** 
 118:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 121:Src/main.c    ****   HAL_Init();
 122:Src/main.c    **** 
 123:Src/main.c    ****   /* USER CODE BEGIN Init */
 124:Src/main.c    **** 
 125:Src/main.c    ****   /* USER CODE END Init */
 126:Src/main.c    **** 
 127:Src/main.c    ****   /* Configure the system clock */
 128:Src/main.c    ****   SystemClock_Config();
 129:Src/main.c    **** 
 130:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 131:Src/main.c    **** 
ARM GAS  /tmp/ccYSSKRz.s 			page 8


 132:Src/main.c    ****   /* USER CODE END SysInit */
 133:Src/main.c    **** 
 134:Src/main.c    ****   /* Initialize all configured peripherals */
 135:Src/main.c    ****   MX_GPIO_Init();
 136:Src/main.c    ****   MX_USART2_UART_Init();
 137:Src/main.c    ****   /* USER CODE BEGIN 2 */
 138:Src/main.c    ****   
 139:Src/main.c    ****   char *test = "\n\r# LEDA";
 140:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)test, strlen(test), 0xFFFFFF);
 141:Src/main.c    ****   
 142:Src/main.c    ****   /*
 143:Src/main.c    ****   srand(0);
 144:Src/main.c    ****   for (int i = 0; i < 10; ++i) {
 145:Src/main.c    ****       char number[10];
 146:Src/main.c    ****       itoa(rand() % 1000, number, 10);
 147:Src/main.c    ****       number[strlen(number)+1] = 0;
 148:Src/main.c    ****       number[strlen(number)] = '\n';
 149:Src/main.c    ****       HAL_UART_Transmit(&huart2, (uint8_t*)number, strlen(number), 0xFFFFFF);
 150:Src/main.c    ****   }
 151:Src/main.c    ****   
 152:Src/main.c    ****   char *PAIR = "\n\rGenerating keys...";
 153:Src/main.c    ****   char *PK = "\n\rPublic key is: ";
 154:Src/main.c    ****   char *SK = "\n\rPrivate key is: ";
 155:Src/main.c    ****   char *ENC = "\n\rEncrypting...";
 156:Src/main.c    ****   char *DEC = "\n\rDecrypting...";
 157:Src/main.c    ****   char *CT = "\n\rCiphertext Encrypt(e, pk) is: ";
 158:Src/main.c    ****   char *SS = "\n\rShared secret Hash(e) - or Hash(c.k) - is: ";
 159:Src/main.c    ****   char *SEED = "\n\rSeed is: ";
 160:Src/main.c    ****   char *ERR_PAIR = "\n\rError in keypair";
 161:Src/main.c    ****   char *ERR_ENC = "\n\rError in enc";
 162:Src/main.c    ****   char *ERR_DEC = "\n\rError in dec";
 163:Src/main.c    ****   */
 164:Src/main.c    ****   
 165:Src/main.c    ****   char *NEWLINE = "\n\r";
 166:Src/main.c    ****   char *COUNT = "\n\rcount = ";
 167:Src/main.c    ****   char *SEED = "\n\rseed = ";
 168:Src/main.c    ****   char *PK = "\n\rpk = ";
 169:Src/main.c    ****   char *SK = "\n\rsk = ";
 170:Src/main.c    ****   char *CT = "\n\rct = ";
 171:Src/main.c    ****   char *SS = "\n\rss = ";
 172:Src/main.c    ****   char *ERR_DEC = "\n\rError in dec";
 173:Src/main.c    ****   int count;
 174:Src/main.c    ****   int ans;
 175:Src/main.c    ****   
 176:Src/main.c    ****   unsigned char msg[CRYPTO_CIPHERTEXTBYTES];
 177:Src/main.c    ****   unsigned char pk[CRYPTO_PUBLICKEYBYTES];
 178:Src/main.c    ****   unsigned char sk[CRYPTO_SECRETKEYBYTES];
 179:Src/main.c    ****   unsigned char ss[CRYPTO_BYTES];
 180:Src/main.c    ****   /* USER CODE END 2 */
 181:Src/main.c    **** 
 182:Src/main.c    ****   /* Infinite loop */
 183:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 184:Src/main.c    ****   while (1)
 185:Src/main.c    ****   {
 186:Src/main.c    ****     /* USER CODE END WHILE */
 187:Src/main.c    ****     
 188:Src/main.c    ****     // count
ARM GAS  /tmp/ccYSSKRz.s 			page 9


 189:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)COUNT, strlen(COUNT), 0xFFFFFF);
 190:Src/main.c    ****     char number[10];
 191:Src/main.c    ****     itoa(count, number, 10);
 192:Src/main.c    ****     number[strlen(number)] = 0;
 193:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)number, strlen(number), 0xFFFFFF);
 194:Src/main.c    ****     
 195:Src/main.c    ****     // seed
 196:Src/main.c    ****     unsigned char entropy_string[96];
 197:Src/main.c    ****     HAL_UART_Receive(&huart2, (uint8_t*)entropy_string, 96, 0xFFFFFF);
 198:Src/main.c    ****     
 199:Src/main.c    ****     unsigned char entropy[48];
 200:Src/main.c    ****     unsigned char *tmp = entropy_string;
 201:Src/main.c    ****     for (size_t count = 0; count < 48; count++) {
 202:Src/main.c    ****       char high = entropy_string[count*2];
 203:Src/main.c    ****       char low = entropy_string[count*2 + 1];
 204:Src/main.c    ****       entropy[count] = 0;
 205:Src/main.c    ****     
 206:Src/main.c    ****       if (high >= '0' && high <= '9') {
 207:Src/main.c    ****           entropy[count] = (high - '0') << 4;
 208:Src/main.c    ****       } else if (high >= 'A' && high <= 'F') {
 209:Src/main.c    ****           entropy[count] = (high - 'A' + 10) << 4;
 210:Src/main.c    ****       } else if (high >= 'a' && high <= 'f') {
 211:Src/main.c    ****           entropy[count] = (high - 'a' + 10) << 4;
 212:Src/main.c    ****       }
 213:Src/main.c    ****     
 214:Src/main.c    ****       if (low >= '0' && low <= '9') {
 215:Src/main.c    ****           entropy[count] |= low - '0';
 216:Src/main.c    ****       } else if (low >= 'A' && low <= 'F') {
 217:Src/main.c    ****           entropy[count] |= low - 'A' + 10;
 218:Src/main.c    ****       } else if (low >= 'a' && low <= 'f') {
 219:Src/main.c    ****           entropy[count] |= low - 'a' + 10;
 220:Src/main.c    ****       }
 221:Src/main.c    ****     }
 222:Src/main.c    ****     randombytes_init(entropy, NULL, 1);
 223:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)SEED, strlen(SEED), 0xFFFFFF);
 224:Src/main.c    ****     printBytes(entropy, 48);
 225:Src/main.c    ****     
 226:Src/main.c    ****     // pk and sk
 227:Src/main.c    ****     //HAL_UART_Transmit(&huart2, (uint8_t*)PAIR, strlen(PAIR), 0xFFFFFF);
 228:Src/main.c    ****     ans = crypto_kem_keypair(pk, sk);
 229:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)PK, strlen(PK), 0xFFFFFF);
 230:Src/main.c    ****     printBytesKAT(pk, CRYPTO_PUBLICKEYBYTES);
 231:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)SK, strlen(SK), 0xFFFFFF);
 232:Src/main.c    ****     printBytes(sk, CRYPTO_SECRETKEYBYTES);
 233:Src/main.c    ****     
 234:Src/main.c    ****     // ct and ss
 235:Src/main.c    ****     //HAL_UART_Transmit(&huart2, (uint8_t*)ENC, strlen(ENC), 0xFFFFFF);
 236:Src/main.c    ****     ans = crypto_kem_enc(msg, ss, pk);
 237:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)CT, strlen(CT), 0xFFFFFF);
 238:Src/main.c    ****     printBytesKAT(msg, CRYPTO_CIPHERTEXTBYTES);
 239:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)SS, strlen(SS), 0xFFFFFF);
 240:Src/main.c    ****     printBytes(ss, CRYPTO_BYTES);
 241:Src/main.c    ****     
 242:Src/main.c    ****     // decryption testing
 243:Src/main.c    ****     //HAL_UART_Transmit(&huart2, (uint8_t*)DEC, strlen(DEC), 0xFFFFFF);
 244:Src/main.c    ****     ans = crypto_kem_dec(ss, msg, sk);
 245:Src/main.c    ****     if (ans != 0) HAL_UART_Transmit(&huart2, (uint8_t*)ERR_DEC, strlen(ERR_DEC), 0xFFFFFF);
ARM GAS  /tmp/ccYSSKRz.s 			page 10


 246:Src/main.c    ****     //HAL_UART_Transmit(&huart2, (uint8_t*)SS, strlen(SS), 0xFFFFFF);
 247:Src/main.c    ****     //printBytes(ss, CRYPTO_BYTES);
 248:Src/main.c    ****   
 249:Src/main.c    ****     // newline
 250:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)NEWLINE, strlen(NEWLINE), 0xFFFFFF);
 251:Src/main.c    ****     
 252:Src/main.c    ****     HAL_GPIO_TogglePin(Ld2_GPIO_Port,Ld2_Pin); // Toggle LED
 253:Src/main.c    ****     HAL_Delay(1000); // Delay 1 Seconds
 254:Src/main.c    ****     ++count;
 255:Src/main.c    ****     /* USER CODE BEGIN 3 */
 256:Src/main.c    ****   }
 257:Src/main.c    ****   /* USER CODE END 3 */
 258:Src/main.c    **** }
 259:Src/main.c    **** 
 260:Src/main.c    **** /**
 261:Src/main.c    ****   * @brief System Clock Configuration
 262:Src/main.c    ****   * @retval None
 263:Src/main.c    ****   */
 264:Src/main.c    **** void SystemClock_Config(void)
 265:Src/main.c    **** {
 268              		.loc 1 265 0
 269              		.cfi_startproc
 270              		@ args = 0, pretend = 0, frame = 80
 271              		@ frame_needed = 0, uses_anonymous_args = 0
 272 0000 30B5     		push	{r4, r5, lr}
 273              	.LCFI8:
 274              		.cfi_def_cfa_offset 12
 275              		.cfi_offset 4, -12
 276              		.cfi_offset 5, -8
 277              		.cfi_offset 14, -4
 278 0002 95B0     		sub	sp, sp, #84
 279              	.LCFI9:
 280              		.cfi_def_cfa_offset 96
 266:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 281              		.loc 1 266 0
 282 0004 0024     		movs	r4, #0
 283 0006 0794     		str	r4, [sp, #28]
 284 0008 0894     		str	r4, [sp, #32]
 285 000a 0994     		str	r4, [sp, #36]
 286 000c 0A94     		str	r4, [sp, #40]
 287 000e 0B94     		str	r4, [sp, #44]
 288 0010 0C94     		str	r4, [sp, #48]
 289 0012 0D94     		str	r4, [sp, #52]
 290 0014 0E94     		str	r4, [sp, #56]
 291 0016 0F94     		str	r4, [sp, #60]
 292 0018 1094     		str	r4, [sp, #64]
 293 001a 1194     		str	r4, [sp, #68]
 294 001c 1294     		str	r4, [sp, #72]
 295 001e 1394     		str	r4, [sp, #76]
 267:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 296              		.loc 1 267 0
 297 0020 0294     		str	r4, [sp, #8]
 298 0022 0394     		str	r4, [sp, #12]
 299 0024 0494     		str	r4, [sp, #16]
 300 0026 0594     		str	r4, [sp, #20]
 301 0028 0694     		str	r4, [sp, #24]
 302              	.LBB5:
ARM GAS  /tmp/ccYSSKRz.s 			page 11


 268:Src/main.c    **** 
 269:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 270:Src/main.c    ****   */
 271:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 303              		.loc 1 271 0
 304 002a 0094     		str	r4, [sp]
 305 002c 1B4B     		ldr	r3, .L24
 306 002e 1A6C     		ldr	r2, [r3, #64]
 307 0030 42F08052 		orr	r2, r2, #268435456
 308 0034 1A64     		str	r2, [r3, #64]
 309 0036 1B6C     		ldr	r3, [r3, #64]
 310 0038 03F08053 		and	r3, r3, #268435456
 311 003c 0093     		str	r3, [sp]
 312 003e 009B     		ldr	r3, [sp]
 313              	.LBE5:
 314              	.LBB6:
 272:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 315              		.loc 1 272 0
 316 0040 0194     		str	r4, [sp, #4]
 317 0042 174A     		ldr	r2, .L24+4
 318 0044 1368     		ldr	r3, [r2]
 319 0046 23F44043 		bic	r3, r3, #49152
 320 004a 43F48043 		orr	r3, r3, #16384
 321 004e 1360     		str	r3, [r2]
 322 0050 1368     		ldr	r3, [r2]
 323 0052 03F44043 		and	r3, r3, #49152
 324 0056 0193     		str	r3, [sp, #4]
 325 0058 019B     		ldr	r3, [sp, #4]
 326              	.LBE6:
 273:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 274:Src/main.c    ****   */
 275:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 327              		.loc 1 275 0
 328 005a 0225     		movs	r5, #2
 329 005c 0795     		str	r5, [sp, #28]
 276:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 330              		.loc 1 276 0
 331 005e 0123     		movs	r3, #1
 332 0060 0A93     		str	r3, [sp, #40]
 277:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 333              		.loc 1 277 0
 334 0062 1023     		movs	r3, #16
 335 0064 0B93     		str	r3, [sp, #44]
 278:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 336              		.loc 1 278 0
 337 0066 0D95     		str	r5, [sp, #52]
 279:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 338              		.loc 1 279 0
 339 0068 0E94     		str	r4, [sp, #56]
 280:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 340              		.loc 1 280 0
 341 006a 0F93     		str	r3, [sp, #60]
 281:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 342              		.loc 1 281 0
 343 006c 4FF4A873 		mov	r3, #336
 344 0070 1093     		str	r3, [sp, #64]
 282:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
ARM GAS  /tmp/ccYSSKRz.s 			page 12


 345              		.loc 1 282 0
 346 0072 0423     		movs	r3, #4
 347 0074 1193     		str	r3, [sp, #68]
 283:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 348              		.loc 1 283 0
 349 0076 1295     		str	r5, [sp, #72]
 284:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = 2;
 350              		.loc 1 284 0
 351 0078 1395     		str	r5, [sp, #76]
 285:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 352              		.loc 1 285 0
 353 007a 07A8     		add	r0, sp, #28
 354 007c FFF7FEFF 		bl	HAL_RCC_OscConfig
 355              	.LVL27:
 286:Src/main.c    ****   {
 287:Src/main.c    ****     Error_Handler();
 288:Src/main.c    ****   }
 289:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 290:Src/main.c    ****   */
 291:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 356              		.loc 1 291 0
 357 0080 0F23     		movs	r3, #15
 358 0082 0293     		str	r3, [sp, #8]
 292:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 293:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 359              		.loc 1 293 0
 360 0084 0395     		str	r5, [sp, #12]
 294:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 361              		.loc 1 294 0
 362 0086 0494     		str	r4, [sp, #16]
 295:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 363              		.loc 1 295 0
 364 0088 4FF48053 		mov	r3, #4096
 365 008c 0593     		str	r3, [sp, #20]
 296:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 366              		.loc 1 296 0
 367 008e 0694     		str	r4, [sp, #24]
 297:Src/main.c    **** 
 298:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 368              		.loc 1 298 0
 369 0090 02A8     		add	r0, sp, #8
 370 0092 2946     		mov	r1, r5
 371 0094 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 372              	.LVL28:
 299:Src/main.c    ****   {
 300:Src/main.c    ****     Error_Handler();
 301:Src/main.c    ****   }
 302:Src/main.c    **** }
 373              		.loc 1 302 0
 374 0098 15B0     		add	sp, sp, #84
 375              	.LCFI10:
 376              		.cfi_def_cfa_offset 12
 377              		@ sp needed
 378 009a 30BD     		pop	{r4, r5, pc}
 379              	.L25:
 380              		.align	2
 381              	.L24:
ARM GAS  /tmp/ccYSSKRz.s 			page 13


 382 009c 00380240 		.word	1073887232
 383 00a0 00700040 		.word	1073770496
 384              		.cfi_endproc
 385              	.LFE144:
 387              		.section	.text.main,"ax",%progbits
 388              		.align	2
 389              		.global	main
 390              		.thumb
 391              		.thumb_func
 393              	main:
 394              	.LFB143:
 112:Src/main.c    ****   /* USER CODE BEGIN 1 */
 395              		.loc 1 112 0
 396              		.cfi_startproc
 397              		@ args = 0, pretend = 0, frame = 3320
 398              		@ frame_needed = 0, uses_anonymous_args = 0
 399 0000 70B5     		push	{r4, r5, r6, lr}
 400              	.LCFI11:
 401              		.cfi_def_cfa_offset 16
 402              		.cfi_offset 4, -16
 403              		.cfi_offset 5, -12
 404              		.cfi_offset 6, -8
 405              		.cfi_offset 14, -4
 406 0002 ADF6F84D 		subw	sp, sp, #3320
 407              	.LCFI12:
 408              		.cfi_def_cfa_offset 3336
 121:Src/main.c    **** 
 409              		.loc 1 121 0
 410 0006 FFF7FEFF 		bl	HAL_Init
 411              	.LVL29:
 128:Src/main.c    **** 
 412              		.loc 1 128 0
 413 000a FFF7FEFF 		bl	SystemClock_Config
 414              	.LVL30:
 135:Src/main.c    ****   MX_USART2_UART_Init();
 415              		.loc 1 135 0
 416 000e FFF7FEFF 		bl	MX_GPIO_Init
 417              	.LVL31:
 136:Src/main.c    ****   /* USER CODE BEGIN 2 */
 418              		.loc 1 136 0
 419 0012 FFF7FEFF 		bl	MX_USART2_UART_Init
 420              	.LVL32:
 140:Src/main.c    ****   
 421              		.loc 1 140 0
 422 0016 6E48     		ldr	r0, .L38
 423 0018 6E49     		ldr	r1, .L38+4
 424 001a 0822     		movs	r2, #8
 425 001c 6FF07F43 		mvn	r3, #-16777216
 426 0020 FFF7FEFF 		bl	HAL_UART_Transmit
 427              	.LVL33:
 428              	.L36:
 429              	.LBB7:
 189:Src/main.c    ****     char number[10];
 430              		.loc 1 189 0
 431 0024 6A4D     		ldr	r5, .L38
 432 0026 2846     		mov	r0, r5
 433 0028 6B49     		ldr	r1, .L38+8
ARM GAS  /tmp/ccYSSKRz.s 			page 14


 434 002a 0A22     		movs	r2, #10
 435 002c 6FF07F43 		mvn	r3, #-16777216
 436 0030 FFF7FEFF 		bl	HAL_UART_Transmit
 437              	.LVL34:
 191:Src/main.c    ****     number[strlen(number)] = 0;
 438              		.loc 1 191 0
 439 0034 2046     		mov	r0, r4
 440 0036 6946     		mov	r1, sp
 441 0038 0A22     		movs	r2, #10
 442 003a FFF7FEFF 		bl	itoa
 443              	.LVL35:
 192:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)number, strlen(number), 0xFFFFFF);
 444              		.loc 1 192 0
 445 003e 6846     		mov	r0, sp
 446 0040 FFF7FEFF 		bl	strlen
 447              	.LVL36:
 448 0044 0026     		movs	r6, #0
 449 0046 0DF80060 		strb	r6, [sp, r0]
 193:Src/main.c    ****     
 450              		.loc 1 193 0
 451 004a 6846     		mov	r0, sp
 452 004c FFF7FEFF 		bl	strlen
 453              	.LVL37:
 454 0050 82B2     		uxth	r2, r0
 455 0052 2846     		mov	r0, r5
 456 0054 6946     		mov	r1, sp
 457 0056 6FF07F43 		mvn	r3, #-16777216
 458 005a FFF7FEFF 		bl	HAL_UART_Transmit
 459              	.LVL38:
 197:Src/main.c    ****     
 460              		.loc 1 197 0
 461 005e 2846     		mov	r0, r5
 462 0060 0FA9     		add	r1, sp, #60
 463 0062 6022     		movs	r2, #96
 464 0064 6FF07F43 		mvn	r3, #-16777216
 465 0068 FFF7FEFF 		bl	HAL_UART_Receive
 466              	.LVL39:
 467              	.LBB8:
 201:Src/main.c    ****       char high = entropy_string[count*2];
 468              		.loc 1 201 0
 469 006c 3346     		mov	r3, r6
 470 006e 44E0     		b	.L27
 471              	.LVL40:
 472              	.L34:
 473              	.LBB9:
 202:Src/main.c    ****       char low = entropy_string[count*2 + 1];
 474              		.loc 1 202 0
 475 0070 0FAA     		add	r2, sp, #60
 476              	.LVL41:
 477 0072 12F81300 		ldrb	r0, [r2, r3, lsl #1]	@ zero_extendqisi2
 478              	.LVL42:
 203:Src/main.c    ****       entropy[count] = 0;
 479              		.loc 1 203 0
 480 0076 02EB4302 		add	r2, r2, r3, lsl #1
 481              	.LVL43:
 482 007a 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 483              	.LVL44:
ARM GAS  /tmp/ccYSSKRz.s 			page 15


 204:Src/main.c    ****     
 484              		.loc 1 204 0
 485 007c 0025     		movs	r5, #0
 486 007e 03AA     		add	r2, sp, #12
 487 0080 D554     		strb	r5, [r2, r3]
 206:Src/main.c    ****           entropy[count] = (high - '0') << 4;
 488              		.loc 1 206 0
 489 0082 A0F13002 		sub	r2, r0, #48
 490 0086 D2B2     		uxtb	r2, r2
 491 0088 092A     		cmp	r2, #9
 492 008a 03D8     		bhi	.L28
 207:Src/main.c    ****       } else if (high >= 'A' && high <= 'F') {
 493              		.loc 1 207 0
 494 008c 1201     		lsls	r2, r2, #4
 495 008e 03A8     		add	r0, sp, #12
 496              	.LVL45:
 497 0090 C254     		strb	r2, [r0, r3]
 498 0092 12E0     		b	.L29
 499              	.LVL46:
 500              	.L28:
 208:Src/main.c    ****           entropy[count] = (high - 'A' + 10) << 4;
 501              		.loc 1 208 0
 502 0094 A0F14102 		sub	r2, r0, #65
 503 0098 D2B2     		uxtb	r2, r2
 504 009a 052A     		cmp	r2, #5
 505 009c 04D8     		bhi	.L30
 209:Src/main.c    ****       } else if (high >= 'a' && high <= 'f') {
 506              		.loc 1 209 0
 507 009e 3738     		subs	r0, r0, #55
 508              	.LVL47:
 509 00a0 0001     		lsls	r0, r0, #4
 510              	.LVL48:
 511 00a2 03AA     		add	r2, sp, #12
 512 00a4 D054     		strb	r0, [r2, r3]
 513 00a6 08E0     		b	.L29
 514              	.LVL49:
 515              	.L30:
 210:Src/main.c    ****           entropy[count] = (high - 'a' + 10) << 4;
 516              		.loc 1 210 0
 517 00a8 A0F16102 		sub	r2, r0, #97
 518 00ac D2B2     		uxtb	r2, r2
 519 00ae 052A     		cmp	r2, #5
 520 00b0 03D8     		bhi	.L29
 211:Src/main.c    ****       }
 521              		.loc 1 211 0
 522 00b2 5738     		subs	r0, r0, #87
 523              	.LVL50:
 524 00b4 0001     		lsls	r0, r0, #4
 525              	.LVL51:
 526 00b6 03AA     		add	r2, sp, #12
 527 00b8 D054     		strb	r0, [r2, r3]
 528              	.L29:
 214:Src/main.c    ****           entropy[count] |= low - '0';
 529              		.loc 1 214 0
 530 00ba A1F13002 		sub	r2, r1, #48
 531 00be D2B2     		uxtb	r2, r2
 532 00c0 092A     		cmp	r2, #9
ARM GAS  /tmp/ccYSSKRz.s 			page 16


 533 00c2 04D8     		bhi	.L31
 215:Src/main.c    ****       } else if (low >= 'A' && low <= 'F') {
 534              		.loc 1 215 0
 535 00c4 03A9     		add	r1, sp, #12
 536              	.LVL52:
 537 00c6 C85C     		ldrb	r0, [r1, r3]	@ zero_extendqisi2
 538 00c8 0243     		orrs	r2, r2, r0
 539 00ca CA54     		strb	r2, [r1, r3]
 540 00cc 14E0     		b	.L32
 541              	.LVL53:
 542              	.L31:
 216:Src/main.c    ****           entropy[count] |= low - 'A' + 10;
 543              		.loc 1 216 0
 544 00ce A1F14102 		sub	r2, r1, #65
 545 00d2 D2B2     		uxtb	r2, r2
 546 00d4 052A     		cmp	r2, #5
 547 00d6 05D8     		bhi	.L33
 217:Src/main.c    ****       } else if (low >= 'a' && low <= 'f') {
 548              		.loc 1 217 0
 549 00d8 03AA     		add	r2, sp, #12
 550 00da 3739     		subs	r1, r1, #55
 551              	.LVL54:
 552 00dc D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 553 00de 0143     		orrs	r1, r1, r0
 554              	.LVL55:
 555 00e0 D154     		strb	r1, [r2, r3]
 556 00e2 09E0     		b	.L32
 557              	.LVL56:
 558              	.L33:
 218:Src/main.c    ****           entropy[count] |= low - 'a' + 10;
 559              		.loc 1 218 0
 560 00e4 A1F16102 		sub	r2, r1, #97
 561 00e8 D2B2     		uxtb	r2, r2
 562 00ea 052A     		cmp	r2, #5
 563 00ec 04D8     		bhi	.L32
 219:Src/main.c    ****       }
 564              		.loc 1 219 0
 565 00ee 03AA     		add	r2, sp, #12
 566 00f0 5739     		subs	r1, r1, #87
 567              	.LVL57:
 568 00f2 D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 569 00f4 0143     		orrs	r1, r1, r0
 570              	.LVL58:
 571 00f6 D154     		strb	r1, [r2, r3]
 572              	.L32:
 573              	.LBE9:
 201:Src/main.c    ****       char high = entropy_string[count*2];
 574              		.loc 1 201 0 discriminator 2
 575 00f8 0133     		adds	r3, r3, #1
 576              	.LVL59:
 577              	.L27:
 201:Src/main.c    ****       char high = entropy_string[count*2];
 578              		.loc 1 201 0 is_stmt 0 discriminator 1
 579 00fa 2F2B     		cmp	r3, #47
 580 00fc B8D9     		bls	.L34
 581              	.LBE8:
 222:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)SEED, strlen(SEED), 0xFFFFFF);
ARM GAS  /tmp/ccYSSKRz.s 			page 17


 582              		.loc 1 222 0 is_stmt 1
 583 00fe 03A8     		add	r0, sp, #12
 584 0100 0021     		movs	r1, #0
 585 0102 0122     		movs	r2, #1
 586 0104 FFF7FEFF 		bl	randombytes_init
 587              	.LVL60:
 223:Src/main.c    ****     printBytes(entropy, 48);
 588              		.loc 1 223 0
 589 0108 314D     		ldr	r5, .L38
 590 010a 2846     		mov	r0, r5
 591 010c 3349     		ldr	r1, .L38+12
 592 010e 0922     		movs	r2, #9
 593 0110 6FF07F43 		mvn	r3, #-16777216
 594 0114 FFF7FEFF 		bl	HAL_UART_Transmit
 595              	.LVL61:
 224:Src/main.c    ****     
 596              		.loc 1 224 0
 597 0118 03A8     		add	r0, sp, #12
 598 011a 3021     		movs	r1, #48
 599 011c FFF7FEFF 		bl	printBytes
 600              	.LVL62:
 228:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)PK, strlen(PK), 0xFFFFFF);
 601              		.loc 1 228 0
 602 0120 35A8     		add	r0, sp, #212
 603 0122 2FA9     		add	r1, sp, #188
 604 0124 FFF7FEFF 		bl	crypto_kem_keypair
 605              	.LVL63:
 229:Src/main.c    ****     printBytesKAT(pk, CRYPTO_PUBLICKEYBYTES);
 606              		.loc 1 229 0
 607 0128 2846     		mov	r0, r5
 608 012a 2D49     		ldr	r1, .L38+16
 609 012c 0722     		movs	r2, #7
 610 012e 6FF07F43 		mvn	r3, #-16777216
 611 0132 FFF7FEFF 		bl	HAL_UART_Transmit
 612              	.LVL64:
 230:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)SK, strlen(SK), 0xFFFFFF);
 613              		.loc 1 230 0
 614 0136 35A8     		add	r0, sp, #212
 615 0138 40F61801 		movw	r1, #2072
 616 013c FFF7FEFF 		bl	printBytesKAT
 617              	.LVL65:
 231:Src/main.c    ****     printBytes(sk, CRYPTO_SECRETKEYBYTES);
 618              		.loc 1 231 0
 619 0140 2846     		mov	r0, r5
 620 0142 2849     		ldr	r1, .L38+20
 621 0144 0722     		movs	r2, #7
 622 0146 6FF07F43 		mvn	r3, #-16777216
 623 014a FFF7FEFF 		bl	HAL_UART_Transmit
 624              	.LVL66:
 232:Src/main.c    ****     
 625              		.loc 1 232 0
 626 014e 2FA8     		add	r0, sp, #188
 627 0150 1821     		movs	r1, #24
 628 0152 FFF7FEFF 		bl	printBytes
 629              	.LVL67:
 236:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)CT, strlen(CT), 0xFFFFFF);
 630              		.loc 1 236 0
ARM GAS  /tmp/ccYSSKRz.s 			page 18


 631 0156 0DF6EC00 		addw	r0, sp, #2284
 632 015a 27A9     		add	r1, sp, #156
 633 015c 35AA     		add	r2, sp, #212
 634 015e FFF7FEFF 		bl	crypto_kem_enc
 635              	.LVL68:
 237:Src/main.c    ****     printBytesKAT(msg, CRYPTO_CIPHERTEXTBYTES);
 636              		.loc 1 237 0
 637 0162 2846     		mov	r0, r5
 638 0164 2049     		ldr	r1, .L38+24
 639 0166 0722     		movs	r2, #7
 640 0168 6FF07F43 		mvn	r3, #-16777216
 641 016c FFF7FEFF 		bl	HAL_UART_Transmit
 642              	.LVL69:
 238:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)SS, strlen(SS), 0xFFFFFF);
 643              		.loc 1 238 0
 644 0170 0DF6EC00 		addw	r0, sp, #2284
 645 0174 40F20C41 		movw	r1, #1036
 646 0178 FFF7FEFF 		bl	printBytesKAT
 647              	.LVL70:
 239:Src/main.c    ****     printBytes(ss, CRYPTO_BYTES);
 648              		.loc 1 239 0
 649 017c 2846     		mov	r0, r5
 650 017e 1B49     		ldr	r1, .L38+28
 651 0180 0722     		movs	r2, #7
 652 0182 6FF07F43 		mvn	r3, #-16777216
 653 0186 FFF7FEFF 		bl	HAL_UART_Transmit
 654              	.LVL71:
 240:Src/main.c    ****     
 655              		.loc 1 240 0
 656 018a 27A8     		add	r0, sp, #156
 657 018c 2021     		movs	r1, #32
 658 018e FFF7FEFF 		bl	printBytes
 659              	.LVL72:
 244:Src/main.c    ****     if (ans != 0) HAL_UART_Transmit(&huart2, (uint8_t*)ERR_DEC, strlen(ERR_DEC), 0xFFFFFF);
 660              		.loc 1 244 0
 661 0192 27A8     		add	r0, sp, #156
 662 0194 0DF6EC01 		addw	r1, sp, #2284
 663 0198 2FAA     		add	r2, sp, #188
 664 019a FFF7FEFF 		bl	crypto_kem_dec
 665              	.LVL73:
 245:Src/main.c    ****     //HAL_UART_Transmit(&huart2, (uint8_t*)SS, strlen(SS), 0xFFFFFF);
 666              		.loc 1 245 0
 667 019e 30B1     		cbz	r0, .L35
 245:Src/main.c    ****     //HAL_UART_Transmit(&huart2, (uint8_t*)SS, strlen(SS), 0xFFFFFF);
 668              		.loc 1 245 0 is_stmt 0 discriminator 1
 669 01a0 2846     		mov	r0, r5
 670              	.LVL74:
 671 01a2 1349     		ldr	r1, .L38+32
 672 01a4 0E22     		movs	r2, #14
 673 01a6 6FF07F43 		mvn	r3, #-16777216
 674 01aa FFF7FEFF 		bl	HAL_UART_Transmit
 675              	.LVL75:
 676              	.L35:
 250:Src/main.c    ****     
 677              		.loc 1 250 0 is_stmt 1
 678 01ae 0848     		ldr	r0, .L38
 679 01b0 1049     		ldr	r1, .L38+36
ARM GAS  /tmp/ccYSSKRz.s 			page 19


 680 01b2 0222     		movs	r2, #2
 681 01b4 6FF07F43 		mvn	r3, #-16777216
 682 01b8 FFF7FEFF 		bl	HAL_UART_Transmit
 683              	.LVL76:
 252:Src/main.c    ****     HAL_Delay(1000); // Delay 1 Seconds
 684              		.loc 1 252 0
 685 01bc 0E48     		ldr	r0, .L38+40
 686 01be 2021     		movs	r1, #32
 687 01c0 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 688              	.LVL77:
 253:Src/main.c    ****     ++count;
 689              		.loc 1 253 0
 690 01c4 4FF47A70 		mov	r0, #1000
 691 01c8 FFF7FEFF 		bl	HAL_Delay
 692              	.LVL78:
 254:Src/main.c    ****     /* USER CODE BEGIN 3 */
 693              		.loc 1 254 0
 694 01cc 0134     		adds	r4, r4, #1
 695              	.LVL79:
 696              	.LBE7:
 256:Src/main.c    ****   /* USER CODE END 3 */
 697              		.loc 1 256 0
 698 01ce 29E7     		b	.L36
 699              	.L39:
 700              		.align	2
 701              	.L38:
 702 01d0 00000000 		.word	huart2
 703 01d4 14000000 		.word	.LC2
 704 01d8 20000000 		.word	.LC3
 705 01dc 2C000000 		.word	.LC4
 706 01e0 38000000 		.word	.LC5
 707 01e4 40000000 		.word	.LC6
 708 01e8 48000000 		.word	.LC7
 709 01ec 50000000 		.word	.LC8
 710 01f0 58000000 		.word	.LC9
 711 01f4 68000000 		.word	.LC10
 712 01f8 00000240 		.word	1073872896
 713              		.cfi_endproc
 714              	.LFE143:
 716              		.section	.text.Error_Handler,"ax",%progbits
 717              		.align	2
 718              		.global	Error_Handler
 719              		.thumb
 720              		.thumb_func
 722              	Error_Handler:
 723              	.LFB145:
 303:Src/main.c    **** 
 304:Src/main.c    **** /* USER CODE BEGIN 4 */
 305:Src/main.c    **** 
 306:Src/main.c    **** /* USER CODE END 4 */
 307:Src/main.c    **** 
 308:Src/main.c    **** /**
 309:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 310:Src/main.c    ****   * @retval None
 311:Src/main.c    ****   */
 312:Src/main.c    **** void Error_Handler(void)
 313:Src/main.c    **** {
ARM GAS  /tmp/ccYSSKRz.s 			page 20


 724              		.loc 1 313 0
 725              		.cfi_startproc
 726              		@ args = 0, pretend = 0, frame = 0
 727              		@ frame_needed = 0, uses_anonymous_args = 0
 728              		@ link register save eliminated.
 729 0000 7047     		bx	lr
 730              		.cfi_endproc
 731              	.LFE145:
 733 0002 00BF     		.section	.rodata.str1.4,"aMS",%progbits,1
 734              		.align	2
 735              	.LC0:
 736 0000 25303278 		.ascii	"%02x\000"
 736      00
 737 0005 000000   		.space	3
 738              	.LC1:
 739 0008 30303030 		.ascii	"00000000\000"
 739      30303030 
 739      00
 740 0011 000000   		.space	3
 741              	.LC2:
 742 0014 0A0D2320 		.ascii	"\012\015# LEDA\000"
 742      4C454441 
 742      00
 743 001d 000000   		.space	3
 744              	.LC3:
 745 0020 0A0D636F 		.ascii	"\012\015count = \000"
 745      756E7420 
 745      3D2000
 746 002b 00       		.space	1
 747              	.LC4:
 748 002c 0A0D7365 		.ascii	"\012\015seed = \000"
 748      6564203D 
 748      2000
 749 0036 0000     		.space	2
 750              	.LC5:
 751 0038 0A0D706B 		.ascii	"\012\015pk = \000"
 751      203D2000 
 752              	.LC6:
 753 0040 0A0D736B 		.ascii	"\012\015sk = \000"
 753      203D2000 
 754              	.LC7:
 755 0048 0A0D6374 		.ascii	"\012\015ct = \000"
 755      203D2000 
 756              	.LC8:
 757 0050 0A0D7373 		.ascii	"\012\015ss = \000"
 757      203D2000 
 758              	.LC9:
 759 0058 0A0D4572 		.ascii	"\012\015Error in dec\000"
 759      726F7220 
 759      696E2064 
 759      656300
 760 0067 00       		.space	1
 761              	.LC10:
 762 0068 0A0D00   		.ascii	"\012\015\000"
 763              		.text
 764              	.Letext0:
 765              		.file 2 "/usr/include/newlib/machine/_default_types.h"
ARM GAS  /tmp/ccYSSKRz.s 			page 21


 766              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 767              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 768              		.file 5 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h"
 769              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 770              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 771              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 772              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 773              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 774              		.file 11 "Inc/qc_ldpc_parameters.h"
 775              		.file 12 "Drivers/CMSIS/Include/core_cm4.h"
 776              		.file 13 "Inc/usart.h"
 777              		.file 14 "/usr/include/newlib/stdio.h"
 778              		.file 15 "/usr/include/newlib/string.h"
 779              		.file 16 "Inc/rng.h"
 780              		.file 17 "Inc/api.h"
 781              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 782              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 783              		.file 20 "Inc/gpio.h"
ARM GAS  /tmp/ccYSSKRz.s 			page 22


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccYSSKRz.s:20     .text.Delay:0000000000000000 $t
     /tmp/ccYSSKRz.s:25     .text.Delay:0000000000000000 Delay
     /tmp/ccYSSKRz.s:55     .text.printBytes:0000000000000000 $t
     /tmp/ccYSSKRz.s:60     .text.printBytes:0000000000000000 printBytes
     /tmp/ccYSSKRz.s:114    .text.printBytes:0000000000000030 $d
     /tmp/ccYSSKRz.s:120    .text.printBytesKAT:0000000000000000 $t
     /tmp/ccYSSKRz.s:125    .text.printBytesKAT:0000000000000000 printBytesKAT
     /tmp/ccYSSKRz.s:254    .text.printBytesKAT:0000000000000084 $d
     /tmp/ccYSSKRz.s:261    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccYSSKRz.s:266    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccYSSKRz.s:382    .text.SystemClock_Config:000000000000009c $d
     /tmp/ccYSSKRz.s:388    .text.main:0000000000000000 $t
     /tmp/ccYSSKRz.s:393    .text.main:0000000000000000 main
     /tmp/ccYSSKRz.s:702    .text.main:00000000000001d0 $d
     /tmp/ccYSSKRz.s:717    .text.Error_Handler:0000000000000000 $t
     /tmp/ccYSSKRz.s:722    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccYSSKRz.s:734    .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.852701d010626b88f261455c8f3c865d
                           .group:0000000000000000 wm4.stm32f4xx_hal_conf.h.24.d14dd899dbfa16d6dc9a7b8d5f0b81d2
                           .group:0000000000000000 wm4.stm32f4xx.h.55.8c995fbadbb7a126747b547eb8ec7b5b
                           .group:0000000000000000 wm4.stm32f446xx.h.51.16a9122ede9860ebbb552c9e423d1ecd
                           .group:0000000000000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:0000000000000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:0000000000000000 wm4._intsup.h.10.35a45952db64d30146faa63a55c20c1c
                           .group:0000000000000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:0000000000000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:0000000000000000 wm4.cmsis_version.h.32.4d5822004c01a829a975260e854b5f8e
                           .group:0000000000000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.f42444deefab66ffa141b9b9fddb57a3
                           .group:0000000000000000 wm4.core_cm4.h.174.059a5e001a9e729091d1407208e93224
                           .group:0000000000000000 wm4.mpu_armv7.h.32.27b4593cb2f8d3152ca5d97a9d72b321
                           .group:0000000000000000 wm4.stm32f446xx.h.934.bc7ea77f64b5be5f795628ebc7fc6b73
                           .group:0000000000000000 wm4.stm32f4xx.h.212.729f0f890654645a3f47ccc0cc2b00e7
                           .group:0000000000000000 wm4.stm32_hal_legacy.h.23.ef4988de22c7a2f0806a94b08b5606e0
                           .group:0000000000000000 wm4.stddef.h.39.c744ceb84abf2f8351653f0e2622da1c
                           .group:0000000000000000 wm4.stm32f4xx_hal_def.h.58.2d2c85d5b9693a63e90566b806e8a752
                           .group:0000000000000000 wm4.stm32f4xx_hal_rcc_ex.h.22.ed8712e28628f6d35bd6f8847ee2f18f
                           .group:0000000000000000 wm4.stm32f4xx_hal_rcc.h.108.0c18a3cfc2dd91bdf92470b4bd0ea1b5
                           .group:0000000000000000 wm4.stm32f4xx_hal_exti.h.22.66e33df8a935c9f8e1682d5515a6c09a
                           .group:0000000000000000 wm4.stm32f4xx_hal_gpio.h.22.be2c6bcf9722096ea8f49a41bf6aa50c
                           .group:0000000000000000 wm4.stm32f4xx_hal_gpio_ex.h.22.6858f59ca8a52c645189c74569e4d5b8
                           .group:0000000000000000 wm4.stm32f4xx_hal_gpio.h.264.528537eb92c2ec5c1cd9dfb4d255d1da
                           .group:0000000000000000 wm4.stm32f4xx_hal_dma.h.22.fffce20ac9119c50557659c75e75ab1c
                           .group:0000000000000000 wm4.stm32f4xx_hal_dma.h.721.a1e57ffbc615f926e6509c5acc65e492
                           .group:0000000000000000 wm4.stm32f4xx_hal_cortex.h.22.e6aa3b847b5388be63c32d1f9e696ef7
                           .group:0000000000000000 wm4.stm32f4xx_hal_flash.h.22.31b301be2655c3eb8583e51c8231544a
                           .group:0000000000000000 wm4.stm32f4xx_hal_flash_ex.h.22.df74a74dd40656a7fcd7d90cedd190b4
                           .group:0000000000000000 wm4.stm32f4xx_hal_flash.h.363.51efdf0f6c88f683efb89d7cc95cc1be
                           .group:0000000000000000 wm4.stm32f4xx_hal_pwr.h.22.2c27d93ae187efe3a73816f03a329970
                           .group:0000000000000000 wm4.stm32f4xx_hal_pwr_ex.h.22.cf49f655fb514fa1eda6a251fa1b2f1a
                           .group:0000000000000000 wm4.stm32f4xx_hal_pwr.h.337.60b43975c84527a23cb6994b23165a5e
                           .group:0000000000000000 wm4.stm32f4xx_hal_uart.h.22.2b47c8130d845b927904837c0b2264ce
                           .group:0000000000000000 wm4.stm32f4xx_hal.h.72.a5a58188aa461a0614f1e58e159c7840
                           .group:0000000000000000 wm4.main.h.61.f713c471afe2510354bc6b2444b9b417
ARM GAS  /tmp/ccYSSKRz.s 			page 23


                           .group:0000000000000000 wm4.newlib.h.8.2702bca278809460f0af6fba1d84eb68
                           .group:0000000000000000 wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff
                           .group:0000000000000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:0000000000000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:0000000000000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:0000000000000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:0000000000000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:0000000000000000 wm4.cdefs.h.47.55832cb26e4a21cedaa9b1b3b922c6b1
                           .group:0000000000000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:0000000000000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:0000000000000000 wm4.time.h.8.2930fe070f4a8096b07db9159698c8e3
                           .group:0000000000000000 wm4.time.h.2.4581ce0ffb6627cfc02162c94bf846c9
                           .group:0000000000000000 wm4.time.h.24.3660bbb2d0a4c7457ff52ba3ada4c166
                           .group:0000000000000000 wm4.types.h.24.b2be5f53932a9c9d07787288b29b6d75
                           .group:0000000000000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:0000000000000000 wm4.types.h.82.82b71f3f44c70e3a459d0f66642b05eb
                           .group:0000000000000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:0000000000000000 wm4.time.h.217.2f437ac2cf06537c84703833b0977905
                           .group:0000000000000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:0000000000000000 wm4.stdlib.h.54.4fb06e985dc2cdf07f3ef03d3ed01397
                           .group:0000000000000000 wm4.stdio.h.27.3fc80220048df77954e38daec3bb9670
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:0000000000000000 wm4.stdio.h.68.ff6d7571d3ad75c55f15e26dbaa81e35
                           .group:0000000000000000 wm4.qc_ldpc_parameters.h.37.01ba89311159e89992ec3e65d789a51b
                           .group:0000000000000000 wm4.inttypes.h.14.d76379e1484484ef6b6b246cc782d8dc
                           .group:0000000000000000 wm4.inttypes.h.23.73ff1ea04b6018cd02b26f6fdc94fae9
                           .group:0000000000000000 wm4.limits.h.25.5fc8418077d2a1b3fdafee07d2348450
                           .group:0000000000000000 wm4.gf2x_limbs.h.44.4ba8ea293ca87ae1eb808c65b3f7859c
                           .group:0000000000000000 wm4.gf2x_arith.h.78.84d3114adf056aa03d6e1720f5f09797
                           .group:0000000000000000 wm4.rng.h.43.d878a412a37b8758e9c11dbf27ed5812
                           .group:0000000000000000 wm4.gf2x_arith_mod_xPplusOne.h.43.dd456d3b85305b5c168d761e87b26291
                           .group:0000000000000000 wm4.api.h.39.461facc9facebdb29c71caf95c7c4c98

UNDEFINED SYMBOLS
sprintf
HAL_UART_Transmit
huart2
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_USART2_UART_Init
itoa
strlen
HAL_UART_Receive
randombytes_init
crypto_kem_keypair
crypto_kem_enc
crypto_kem_dec
HAL_GPIO_TogglePin
HAL_Delay
