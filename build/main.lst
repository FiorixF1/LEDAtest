ARM GAS  /tmp/ccpWkAWu.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.Delay,"ax",%progbits
  20              		.align	2
  21              		.global	Delay
  22              		.thumb
  23              		.thumb_func
  25              	Delay:
  26              	.LFB140:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "usart.h"
  24:Src/main.c    **** #include "gpio.h"
  25:Src/main.c    **** 
  26:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  27:Src/main.c    **** /* USER CODE BEGIN Includes */
  28:Src/main.c    **** #include <string.h>
  29:Src/main.c    **** #include <time.h>
  30:Src/main.c    **** #include <stdlib.h>
  31:Src/main.c    **** #include <stdio.h>
ARM GAS  /tmp/ccpWkAWu.s 			page 2


  32:Src/main.c    **** #include "api.h"
  33:Src/main.c    **** /* USER CODE END Includes */
  34:Src/main.c    **** 
  35:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  36:Src/main.c    **** /* USER CODE BEGIN PTD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* USER CODE END PTD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PD */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE END PD */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  46:Src/main.c    **** /* USER CODE BEGIN PM */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* USER CODE END PM */
  49:Src/main.c    **** 
  50:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE BEGIN PV */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE END PV */
  55:Src/main.c    **** 
  56:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  57:Src/main.c    **** void SystemClock_Config(void);
  58:Src/main.c    **** /* USER CODE BEGIN PFP */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* USER CODE END PFP */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  63:Src/main.c    **** /* USER CODE BEGIN 0 */
  64:Src/main.c    **** void Delay(__IO uint32_t nCount)
  65:Src/main.c    **** {
  28              		.loc 1 65 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34 0000 82B0     		sub	sp, sp, #8
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37 0002 0190     		str	r0, [sp, #4]
  38              	.L2:
  66:Src/main.c    ****     while (nCount--);
  39              		.loc 1 66 0 discriminator 1
  40 0004 019B     		ldr	r3, [sp, #4]
  41 0006 5A1E     		subs	r2, r3, #1
  42 0008 0192     		str	r2, [sp, #4]
  43 000a 002B     		cmp	r3, #0
  44 000c FAD1     		bne	.L2
  67:Src/main.c    **** }
  45              		.loc 1 67 0
  46 000e 02B0     		add	sp, sp, #8
  47              	.LCFI1:
  48              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccpWkAWu.s 			page 3


  49              		@ sp needed
  50 0010 7047     		bx	lr
  51              		.cfi_endproc
  52              	.LFE140:
  54 0012 00BF     		.section	.text.printBytes,"ax",%progbits
  55              		.align	2
  56              		.global	printBytes
  57              		.thumb
  58              		.thumb_func
  60              	printBytes:
  61              	.LFB141:
  68:Src/main.c    **** 
  69:Src/main.c    **** void printBytes(unsigned char *data, int length) {
  62              		.loc 1 69 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 16
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              	.LVL1:
  67 0000 70B5     		push	{r4, r5, r6, lr}
  68              	.LCFI2:
  69              		.cfi_def_cfa_offset 16
  70              		.cfi_offset 4, -16
  71              		.cfi_offset 5, -12
  72              		.cfi_offset 6, -8
  73              		.cfi_offset 14, -4
  74 0002 84B0     		sub	sp, sp, #16
  75              	.LCFI3:
  76              		.cfi_def_cfa_offset 32
  77 0004 0646     		mov	r6, r0
  78 0006 0D46     		mov	r5, r1
  79              	.LVL2:
  70:Src/main.c    ****     char buffer[16];
  71:Src/main.c    ****     int i;
  72:Src/main.c    ****     for (i = 0; i < length; ++i) {
  80              		.loc 1 72 0
  81 0008 0024     		movs	r4, #0
  82 000a 0CE0     		b	.L5
  83              	.LVL3:
  84              	.L6:
  73:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%02x", data[i]), 0xFFFFFF);
  85              		.loc 1 73 0 discriminator 3
  86 000c 6846     		mov	r0, sp
  87 000e 0849     		ldr	r1, .L8
  88 0010 325D     		ldrb	r2, [r6, r4]	@ zero_extendqisi2
  89 0012 FFF7FEFF 		bl	sprintf
  90              	.LVL4:
  91 0016 82B2     		uxth	r2, r0
  92 0018 0648     		ldr	r0, .L8+4
  93 001a 6946     		mov	r1, sp
  94 001c 6FF07F43 		mvn	r3, #-16777216
  95 0020 FFF7FEFF 		bl	HAL_UART_Transmit
  96              	.LVL5:
  72:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%02x", data[i]), 0xFFFFFF);
  97              		.loc 1 72 0 discriminator 3
  98 0024 0134     		adds	r4, r4, #1
  99              	.LVL6:
 100              	.L5:
ARM GAS  /tmp/ccpWkAWu.s 			page 4


  72:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%02x", data[i]), 0xFFFFFF);
 101              		.loc 1 72 0 is_stmt 0 discriminator 1
 102 0026 AC42     		cmp	r4, r5
 103 0028 F0DB     		blt	.L6
  74:Src/main.c    ****     }
  75:Src/main.c    **** }
 104              		.loc 1 75 0 is_stmt 1
 105 002a 04B0     		add	sp, sp, #16
 106              	.LCFI4:
 107              		.cfi_def_cfa_offset 16
 108              		@ sp needed
 109 002c 70BD     		pop	{r4, r5, r6, pc}
 110              	.LVL7:
 111              	.L9:
 112 002e 00BF     		.align	2
 113              	.L8:
 114 0030 00000000 		.word	.LC0
 115 0034 00000000 		.word	huart2
 116              		.cfi_endproc
 117              	.LFE141:
 119              		.section	.text.printBytesKAT,"ax",%progbits
 120              		.align	2
 121              		.global	printBytesKAT
 122              		.thumb
 123              		.thumb_func
 125              	printBytesKAT:
 126              	.LFB142:
  76:Src/main.c    **** 
  77:Src/main.c    **** // print array of bytes in a KAT-compliant way...
  78:Src/main.c    **** void printBytesKAT(unsigned char *data, int length) {
 127              		.loc 1 78 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 32
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131              	.LVL8:
 132 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 133              	.LCFI5:
 134              		.cfi_def_cfa_offset 24
 135              		.cfi_offset 4, -24
 136              		.cfi_offset 5, -20
 137              		.cfi_offset 6, -16
 138              		.cfi_offset 7, -12
 139              		.cfi_offset 8, -8
 140              		.cfi_offset 14, -4
 141 0004 88B0     		sub	sp, sp, #32
 142              	.LCFI6:
 143              		.cfi_def_cfa_offset 56
 144 0006 0646     		mov	r6, r0
 145 0008 8846     		mov	r8, r1
  79:Src/main.c    ****     char zeros[9] = "00000000";
 146              		.loc 1 79 0
 147 000a 1E4A     		ldr	r2, .L20
 148 000c 05AB     		add	r3, sp, #20
 149 000e 07CA     		ldmia	r2, {r0, r1, r2}
 150              	.LVL9:
 151 0010 03C3     		stmia	r3!, {r0, r1}
 152 0012 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccpWkAWu.s 			page 5


 153              	.LVL10:
  80:Src/main.c    ****     char buffer[16];
  81:Src/main.c    ****     int swap;
  82:Src/main.c    ****     int i;
  83:Src/main.c    ****     
  84:Src/main.c    ****     for (i = 0; i < 4; ++i) {
 154              		.loc 1 84 0
 155 0014 0024     		movs	r4, #0
 156 0016 0CE0     		b	.L11
 157              	.LVL11:
 158              	.L12:
  85:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%02x", data[i]), 0xFFFFFF);
 159              		.loc 1 85 0 discriminator 3
 160 0018 01A8     		add	r0, sp, #4
 161 001a 1B49     		ldr	r1, .L20+4
 162 001c 325D     		ldrb	r2, [r6, r4]	@ zero_extendqisi2
 163 001e FFF7FEFF 		bl	sprintf
 164              	.LVL12:
 165 0022 82B2     		uxth	r2, r0
 166 0024 1948     		ldr	r0, .L20+8
 167 0026 01A9     		add	r1, sp, #4
 168 0028 6FF07F43 		mvn	r3, #-16777216
 169 002c FFF7FEFF 		bl	HAL_UART_Transmit
 170              	.LVL13:
  84:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%02x", data[i]), 0xFFFFFF);
 171              		.loc 1 84 0 discriminator 3
 172 0030 0134     		adds	r4, r4, #1
 173              	.LVL14:
 174              	.L11:
  84:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%02x", data[i]), 0xFFFFFF);
 175              		.loc 1 84 0 is_stmt 0 discriminator 1
 176 0032 032C     		cmp	r4, #3
 177 0034 F0DD     		ble	.L12
  86:Src/main.c    ****     }
  87:Src/main.c    ****     HAL_UART_Transmit(&huart2, zeros, 8, 0xFFFFFF);
 178              		.loc 1 87 0 is_stmt 1
 179 0036 1548     		ldr	r0, .L20+8
 180 0038 05A9     		add	r1, sp, #20
 181 003a 0822     		movs	r2, #8
 182 003c 6FF07F43 		mvn	r3, #-16777216
 183 0040 FFF7FEFF 		bl	HAL_UART_Transmit
 184              	.LVL15:
  88:Src/main.c    ****     
  89:Src/main.c    ****     swap = 0;
  90:Src/main.c    ****     i = 8;
 185              		.loc 1 90 0
 186 0044 0825     		movs	r5, #8
  89:Src/main.c    ****     i = 8;
 187              		.loc 1 89 0
 188 0046 0027     		movs	r7, #0
  91:Src/main.c    ****     while (i < length) {
 189              		.loc 1 91 0
 190 0048 17E0     		b	.L13
 191              	.LVL16:
 192              	.L14:
 193              	.LBB2:
  92:Src/main.c    ****         for (int j = 0; j < 4; ++j) {
ARM GAS  /tmp/ccpWkAWu.s 			page 6


  93:Src/main.c    ****             HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%02x", data[i+j]), 0xFFFF
 194              		.loc 1 93 0 discriminator 3
 195 004a 2B19     		adds	r3, r5, r4
 196 004c 01A8     		add	r0, sp, #4
 197 004e 0E49     		ldr	r1, .L20+4
 198 0050 F25C     		ldrb	r2, [r6, r3]	@ zero_extendqisi2
 199 0052 FFF7FEFF 		bl	sprintf
 200              	.LVL17:
 201 0056 82B2     		uxth	r2, r0
 202 0058 0C48     		ldr	r0, .L20+8
 203 005a 01A9     		add	r1, sp, #4
 204 005c 6FF07F43 		mvn	r3, #-16777216
 205 0060 FFF7FEFF 		bl	HAL_UART_Transmit
 206              	.LVL18:
  92:Src/main.c    ****         for (int j = 0; j < 4; ++j) {
 207              		.loc 1 92 0 discriminator 3
 208 0064 0134     		adds	r4, r4, #1
 209              	.LVL19:
 210 0066 00E0     		b	.L17
 211              	.LVL20:
 212              	.L18:
 213              	.LBE2:
 214 0068 0024     		movs	r4, #0
 215              	.L17:
 216              	.LVL21:
 217              	.LBB3:
  92:Src/main.c    ****         for (int j = 0; j < 4; ++j) {
 218              		.loc 1 92 0 is_stmt 0 discriminator 1
 219 006a 032C     		cmp	r4, #3
 220 006c EDDD     		ble	.L14
 221              	.LBE3:
  94:Src/main.c    ****         }
  95:Src/main.c    ****         
  96:Src/main.c    ****         if (swap) {
 222              		.loc 1 96 0 is_stmt 1
 223 006e 17B1     		cbz	r7, .L15
  97:Src/main.c    ****             i += 12;
 224              		.loc 1 97 0
 225 0070 0C35     		adds	r5, r5, #12
 226              	.LVL22:
  98:Src/main.c    ****             swap = 0;
 227              		.loc 1 98 0
 228 0072 0027     		movs	r7, #0
 229 0074 01E0     		b	.L13
 230              	.LVL23:
 231              	.L15:
  99:Src/main.c    ****         } else {
 100:Src/main.c    ****             i -= 4;
 232              		.loc 1 100 0
 233 0076 043D     		subs	r5, r5, #4
 234              	.LVL24:
 101:Src/main.c    ****             swap = 1;
 235              		.loc 1 101 0
 236 0078 0127     		movs	r7, #1
 237              	.LVL25:
 238              	.L13:
  91:Src/main.c    ****         for (int j = 0; j < 4; ++j) {
ARM GAS  /tmp/ccpWkAWu.s 			page 7


 239              		.loc 1 91 0
 240 007a 4545     		cmp	r5, r8
 241 007c F4DB     		blt	.L18
 102:Src/main.c    ****         }
 103:Src/main.c    ****     }
 104:Src/main.c    **** }
 242              		.loc 1 104 0
 243 007e 08B0     		add	sp, sp, #32
 244              	.LCFI7:
 245              		.cfi_def_cfa_offset 24
 246              		@ sp needed
 247 0080 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 248              	.LVL26:
 249              	.L21:
 250              		.align	2
 251              	.L20:
 252 0084 08000000 		.word	.LC1
 253 0088 00000000 		.word	.LC0
 254 008c 00000000 		.word	huart2
 255              		.cfi_endproc
 256              	.LFE142:
 258              		.section	.text.SystemClock_Config,"ax",%progbits
 259              		.align	2
 260              		.global	SystemClock_Config
 261              		.thumb
 262              		.thumb_func
 264              	SystemClock_Config:
 265              	.LFB144:
 105:Src/main.c    **** 
 106:Src/main.c    **** /* USER CODE END 0 */
 107:Src/main.c    **** 
 108:Src/main.c    **** /**
 109:Src/main.c    ****   * @brief  The application entry point.
 110:Src/main.c    ****   * @retval int
 111:Src/main.c    ****   */
 112:Src/main.c    **** int main(void)
 113:Src/main.c    **** {
 114:Src/main.c    ****   /* USER CODE BEGIN 1 */
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* USER CODE END 1 */
 117:Src/main.c    ****   
 118:Src/main.c    **** 
 119:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 120:Src/main.c    **** 
 121:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 122:Src/main.c    ****   HAL_Init();
 123:Src/main.c    **** 
 124:Src/main.c    ****   /* USER CODE BEGIN Init */
 125:Src/main.c    **** 
 126:Src/main.c    ****   /* USER CODE END Init */
 127:Src/main.c    **** 
 128:Src/main.c    ****   /* Configure the system clock */
 129:Src/main.c    ****   SystemClock_Config();
 130:Src/main.c    **** 
 131:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 132:Src/main.c    **** 
 133:Src/main.c    ****   /* USER CODE END SysInit */
ARM GAS  /tmp/ccpWkAWu.s 			page 8


 134:Src/main.c    **** 
 135:Src/main.c    ****   /* Initialize all configured peripherals */
 136:Src/main.c    ****   MX_GPIO_Init();
 137:Src/main.c    ****   MX_USART2_UART_Init();
 138:Src/main.c    ****   /* USER CODE BEGIN 2 */
 139:Src/main.c    ****   char *test = "I'm alive\n\r";
 140:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)test, strlen(test), 0xFFFFFF);
 141:Src/main.c    ****   
 142:Src/main.c    ****   srand(0);
 143:Src/main.c    ****   for (int i = 0; i < 10; ++i) {
 144:Src/main.c    ****       char number[10];
 145:Src/main.c    ****       itoa(rand() % 1000, number, 10);
 146:Src/main.c    ****       number[strlen(number)+1] = 0;
 147:Src/main.c    ****       number[strlen(number)] = '\n';
 148:Src/main.c    ****       HAL_UART_Transmit(&huart2, (uint8_t*)number, strlen(number), 0xFFFFFF);
 149:Src/main.c    ****   }
 150:Src/main.c    ****   
 151:Src/main.c    ****   unsigned char entropy_string[97] = "061550234D158C5EC95595FE04EF7A25767F2E24CC2BC479D09D86DC9ABCF
 152:Src/main.c    ****   unsigned char entropy[48];
 153:Src/main.c    ****   unsigned char *tmp = entropy_string;
 154:Src/main.c    ****   for (size_t count = 0; count < 48; count++) {
 155:Src/main.c    ****     char high = entropy_string[count*2];
 156:Src/main.c    ****     char low = entropy_string[count*2 + 1];
 157:Src/main.c    ****     entropy[count] = 0;
 158:Src/main.c    ****     
 159:Src/main.c    ****     if (high >= '0' && high <= '9') {
 160:Src/main.c    ****         entropy[count] = (high - '0') << 4;
 161:Src/main.c    ****     } else if (high >= 'A' && high <= 'F') {
 162:Src/main.c    ****         entropy[count] = (high - 'A' + 10) << 4;
 163:Src/main.c    ****     }
 164:Src/main.c    ****     
 165:Src/main.c    ****     if (low >= '0' && low <= '9') {
 166:Src/main.c    ****         entropy[count] |= low - '0';
 167:Src/main.c    ****     } else if (low >= 'A' && low <= 'F') {
 168:Src/main.c    ****         entropy[count] |= low - 'A' + 10;
 169:Src/main.c    ****     }
 170:Src/main.c    ****   }
 171:Src/main.c    ****   randombytes_init(entropy, NULL, 1);
 172:Src/main.c    ****   
 173:Src/main.c    ****   char *PAIR = "\n\rGenerating keys...";
 174:Src/main.c    ****   char *PK = "\n\rPublic key is: ";
 175:Src/main.c    ****   char *SK = "\n\rPrivate key is: ";
 176:Src/main.c    ****   char *ENC = "\n\rEncrypting...";
 177:Src/main.c    ****   char *DEC = "\n\rDecrypting...";
 178:Src/main.c    ****   char *SHOW_CTX = "\n\rCiphertext Encrypt(e, pk) is: ";
 179:Src/main.c    ****   char *SHOW_SS = "\n\rShared secret Hash(e) - or Hash(c.k) - is: ";
 180:Src/main.c    ****   char *SEED = "\n\rSeed is: ";
 181:Src/main.c    ****   char *ERR_PAIR = "\n\rError in keypair";
 182:Src/main.c    ****   char *ERR_ENC = "\n\rError in enc";
 183:Src/main.c    ****   char *ERR_DEC = "\n\rError in dec";
 184:Src/main.c    ****   int ans;
 185:Src/main.c    ****   
 186:Src/main.c    ****   unsigned char msg[CRYPTO_CIPHERTEXTBYTES] = "Hello Nucleo Fun!\n\r";
 187:Src/main.c    ****   unsigned char pk[CRYPTO_PUBLICKEYBYTES];
 188:Src/main.c    ****   unsigned char sk[CRYPTO_SECRETKEYBYTES];
 189:Src/main.c    ****   unsigned char ss[CRYPTO_BYTES];
 190:Src/main.c    ****   
ARM GAS  /tmp/ccpWkAWu.s 			page 9


 191:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)PAIR, strlen(PAIR), 0xFFFFFF);
 192:Src/main.c    ****   ans = crypto_kem_keypair(pk, sk);
 193:Src/main.c    ****   if (ans != 0) HAL_UART_Transmit(&huart2, (uint8_t*)ERR_PAIR, strlen(ERR_PAIR), 0xFFFFFF);
 194:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)PK, strlen(PK), 0xFFFFFF);
 195:Src/main.c    ****   printBytesKAT(pk, CRYPTO_PUBLICKEYBYTES);
 196:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SK, strlen(SK), 0xFFFFFF);
 197:Src/main.c    ****   printBytes(sk, CRYPTO_SECRETKEYBYTES);
 198:Src/main.c    ****   
 199:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)ENC, strlen(ENC), 0xFFFFFF);
 200:Src/main.c    ****   ans = crypto_kem_enc(msg, ss, pk);
 201:Src/main.c    ****   if (ans != 0) HAL_UART_Transmit(&huart2, (uint8_t*)ERR_ENC, strlen(ERR_ENC), 0xFFFFFF);
 202:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SHOW_CTX, strlen(SHOW_CTX), 0xFFFFFF);
 203:Src/main.c    ****   printBytesKAT(msg, CRYPTO_CIPHERTEXTBYTES);
 204:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SHOW_SS, strlen(SHOW_SS), 0xFFFFFF);
 205:Src/main.c    ****   printBytes(ss, CRYPTO_BYTES);
 206:Src/main.c    ****   
 207:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)DEC, strlen(DEC), 0xFFFFFF);
 208:Src/main.c    ****   ans = crypto_kem_dec(ss, msg, sk);
 209:Src/main.c    ****   if (ans != 0) HAL_UART_Transmit(&huart2, (uint8_t*)ERR_DEC, strlen(ERR_DEC), 0xFFFFFF);
 210:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SHOW_SS, strlen(SHOW_SS), 0xFFFFFF);
 211:Src/main.c    ****   printBytes(ss, CRYPTO_BYTES);
 212:Src/main.c    ****   
 213:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SEED, strlen(SEED), 0xFFFFFF);
 214:Src/main.c    ****   printBytes(entropy, 48);
 215:Src/main.c    ****   /* USER CODE END 2 */
 216:Src/main.c    **** 
 217:Src/main.c    ****   /* Infinite loop */
 218:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 219:Src/main.c    ****   while (1)
 220:Src/main.c    ****   {
 221:Src/main.c    ****     /* USER CODE END WHILE */
 222:Src/main.c    ****     HAL_GPIO_TogglePin(Ld2_GPIO_Port,Ld2_Pin); //Toggle LED
 223:Src/main.c    ****     HAL_Delay(1000); //Delay 1 Seconds
 224:Src/main.c    ****     /* USER CODE BEGIN 3 */
 225:Src/main.c    ****   }
 226:Src/main.c    ****   /* USER CODE END 3 */
 227:Src/main.c    **** }
 228:Src/main.c    **** 
 229:Src/main.c    **** /**
 230:Src/main.c    ****   * @brief System Clock Configuration
 231:Src/main.c    ****   * @retval None
 232:Src/main.c    ****   */
 233:Src/main.c    **** void SystemClock_Config(void)
 234:Src/main.c    **** {
 266              		.loc 1 234 0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 80
 269              		@ frame_needed = 0, uses_anonymous_args = 0
 270 0000 30B5     		push	{r4, r5, lr}
 271              	.LCFI8:
 272              		.cfi_def_cfa_offset 12
 273              		.cfi_offset 4, -12
 274              		.cfi_offset 5, -8
 275              		.cfi_offset 14, -4
 276 0002 95B0     		sub	sp, sp, #84
 277              	.LCFI9:
 278              		.cfi_def_cfa_offset 96
ARM GAS  /tmp/ccpWkAWu.s 			page 10


 235:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 279              		.loc 1 235 0
 280 0004 0024     		movs	r4, #0
 281 0006 0794     		str	r4, [sp, #28]
 282 0008 0894     		str	r4, [sp, #32]
 283 000a 0994     		str	r4, [sp, #36]
 284 000c 0A94     		str	r4, [sp, #40]
 285 000e 0B94     		str	r4, [sp, #44]
 286 0010 0C94     		str	r4, [sp, #48]
 287 0012 0D94     		str	r4, [sp, #52]
 288 0014 0E94     		str	r4, [sp, #56]
 289 0016 0F94     		str	r4, [sp, #60]
 290 0018 1094     		str	r4, [sp, #64]
 291 001a 1194     		str	r4, [sp, #68]
 292 001c 1294     		str	r4, [sp, #72]
 293 001e 1394     		str	r4, [sp, #76]
 236:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 294              		.loc 1 236 0
 295 0020 0294     		str	r4, [sp, #8]
 296 0022 0394     		str	r4, [sp, #12]
 297 0024 0494     		str	r4, [sp, #16]
 298 0026 0594     		str	r4, [sp, #20]
 299 0028 0694     		str	r4, [sp, #24]
 300              	.LBB4:
 237:Src/main.c    **** 
 238:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 239:Src/main.c    ****   */
 240:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 301              		.loc 1 240 0
 302 002a 0094     		str	r4, [sp]
 303 002c 1B4B     		ldr	r3, .L24
 304 002e 1A6C     		ldr	r2, [r3, #64]
 305 0030 42F08052 		orr	r2, r2, #268435456
 306 0034 1A64     		str	r2, [r3, #64]
 307 0036 1B6C     		ldr	r3, [r3, #64]
 308 0038 03F08053 		and	r3, r3, #268435456
 309 003c 0093     		str	r3, [sp]
 310 003e 009B     		ldr	r3, [sp]
 311              	.LBE4:
 312              	.LBB5:
 241:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 313              		.loc 1 241 0
 314 0040 0194     		str	r4, [sp, #4]
 315 0042 174A     		ldr	r2, .L24+4
 316 0044 1368     		ldr	r3, [r2]
 317 0046 23F44043 		bic	r3, r3, #49152
 318 004a 43F48043 		orr	r3, r3, #16384
 319 004e 1360     		str	r3, [r2]
 320 0050 1368     		ldr	r3, [r2]
 321 0052 03F44043 		and	r3, r3, #49152
 322 0056 0193     		str	r3, [sp, #4]
 323 0058 019B     		ldr	r3, [sp, #4]
 324              	.LBE5:
 242:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 243:Src/main.c    ****   */
 244:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 325              		.loc 1 244 0
ARM GAS  /tmp/ccpWkAWu.s 			page 11


 326 005a 0225     		movs	r5, #2
 327 005c 0795     		str	r5, [sp, #28]
 245:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 328              		.loc 1 245 0
 329 005e 0123     		movs	r3, #1
 330 0060 0A93     		str	r3, [sp, #40]
 246:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 331              		.loc 1 246 0
 332 0062 1023     		movs	r3, #16
 333 0064 0B93     		str	r3, [sp, #44]
 247:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 334              		.loc 1 247 0
 335 0066 0D95     		str	r5, [sp, #52]
 248:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 336              		.loc 1 248 0
 337 0068 0E94     		str	r4, [sp, #56]
 249:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 16;
 338              		.loc 1 249 0
 339 006a 0F93     		str	r3, [sp, #60]
 250:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 336;
 340              		.loc 1 250 0
 341 006c 4FF4A873 		mov	r3, #336
 342 0070 1093     		str	r3, [sp, #64]
 251:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 343              		.loc 1 251 0
 344 0072 0423     		movs	r3, #4
 345 0074 1193     		str	r3, [sp, #68]
 252:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 346              		.loc 1 252 0
 347 0076 1295     		str	r5, [sp, #72]
 253:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = 2;
 348              		.loc 1 253 0
 349 0078 1395     		str	r5, [sp, #76]
 254:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 350              		.loc 1 254 0
 351 007a 07A8     		add	r0, sp, #28
 352 007c FFF7FEFF 		bl	HAL_RCC_OscConfig
 353              	.LVL27:
 255:Src/main.c    ****   {
 256:Src/main.c    ****     Error_Handler();
 257:Src/main.c    ****   }
 258:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 259:Src/main.c    ****   */
 260:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 354              		.loc 1 260 0
 355 0080 0F23     		movs	r3, #15
 356 0082 0293     		str	r3, [sp, #8]
 261:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 262:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 357              		.loc 1 262 0
 358 0084 0395     		str	r5, [sp, #12]
 263:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 359              		.loc 1 263 0
 360 0086 0494     		str	r4, [sp, #16]
 264:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 361              		.loc 1 264 0
 362 0088 4FF48053 		mov	r3, #4096
ARM GAS  /tmp/ccpWkAWu.s 			page 12


 363 008c 0593     		str	r3, [sp, #20]
 265:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 364              		.loc 1 265 0
 365 008e 0694     		str	r4, [sp, #24]
 266:Src/main.c    **** 
 267:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 366              		.loc 1 267 0
 367 0090 02A8     		add	r0, sp, #8
 368 0092 2946     		mov	r1, r5
 369 0094 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 370              	.LVL28:
 268:Src/main.c    ****   {
 269:Src/main.c    ****     Error_Handler();
 270:Src/main.c    ****   }
 271:Src/main.c    **** }
 371              		.loc 1 271 0
 372 0098 15B0     		add	sp, sp, #84
 373              	.LCFI10:
 374              		.cfi_def_cfa_offset 12
 375              		@ sp needed
 376 009a 30BD     		pop	{r4, r5, pc}
 377              	.L25:
 378              		.align	2
 379              	.L24:
 380 009c 00380240 		.word	1073887232
 381 00a0 00700040 		.word	1073770496
 382              		.cfi_endproc
 383              	.LFE144:
 385              		.section	.text.main,"ax",%progbits
 386              		.align	2
 387              		.global	main
 388              		.thumb
 389              		.thumb_func
 391              	main:
 392              	.LFB143:
 113:Src/main.c    ****   /* USER CODE BEGIN 1 */
 393              		.loc 1 113 0
 394              		.cfi_startproc
 395              		@ args = 0, pretend = 0, frame = 3952
 396              		@ frame_needed = 0, uses_anonymous_args = 0
 397 0000 30B5     		push	{r4, r5, lr}
 398              	.LCFI11:
 399              		.cfi_def_cfa_offset 12
 400              		.cfi_offset 4, -12
 401              		.cfi_offset 5, -8
 402              		.cfi_offset 14, -4
 403 0002 ADF6747D 		subw	sp, sp, #3956
 404              	.LCFI12:
 405              		.cfi_def_cfa_offset 3968
 122:Src/main.c    **** 
 406              		.loc 1 122 0
 407 0006 FFF7FEFF 		bl	HAL_Init
 408              	.LVL29:
 129:Src/main.c    **** 
 409              		.loc 1 129 0
 410 000a FFF7FEFF 		bl	SystemClock_Config
 411              	.LVL30:
ARM GAS  /tmp/ccpWkAWu.s 			page 13


 136:Src/main.c    ****   MX_USART2_UART_Init();
 412              		.loc 1 136 0
 413 000e FFF7FEFF 		bl	MX_GPIO_Init
 414              	.LVL31:
 137:Src/main.c    ****   /* USER CODE BEGIN 2 */
 415              		.loc 1 137 0
 416 0012 FFF7FEFF 		bl	MX_USART2_UART_Init
 417              	.LVL32:
 140:Src/main.c    ****   
 418              		.loc 1 140 0
 419 0016 9548     		ldr	r0, .L40
 420 0018 9549     		ldr	r1, .L40+4
 421 001a 0B22     		movs	r2, #11
 422 001c 6FF07F43 		mvn	r3, #-16777216
 423 0020 FFF7FEFF 		bl	HAL_UART_Transmit
 424              	.LVL33:
 142:Src/main.c    ****   for (int i = 0; i < 10; ++i) {
 425              		.loc 1 142 0
 426 0024 0020     		movs	r0, #0
 427 0026 FFF7FEFF 		bl	srand
 428              	.LVL34:
 429              	.LBB6:
 143:Src/main.c    ****       char number[10];
 430              		.loc 1 143 0
 431 002a 0024     		movs	r4, #0
 432 002c 27E0     		b	.L27
 433              	.LVL35:
 434              	.L28:
 435              	.LBB7:
 145:Src/main.c    ****       number[strlen(number)+1] = 0;
 436              		.loc 1 145 0 discriminator 3
 437 002e FFF7FEFF 		bl	rand
 438              	.LVL36:
 439 0032 904B     		ldr	r3, .L40+8
 440 0034 83FB0032 		smull	r3, r2, r3, r0
 441 0038 C317     		asrs	r3, r0, #31
 442 003a C3EBA213 		rsb	r3, r3, r2, asr #6
 443 003e 4FF47A72 		mov	r2, #1000
 444 0042 02FB1300 		mls	r0, r2, r3, r0
 445 0046 6946     		mov	r1, sp
 446 0048 0A22     		movs	r2, #10
 447 004a FFF7FEFF 		bl	itoa
 448              	.LVL37:
 146:Src/main.c    ****       number[strlen(number)] = '\n';
 449              		.loc 1 146 0 discriminator 3
 450 004e 6846     		mov	r0, sp
 451 0050 FFF7FEFF 		bl	strlen
 452              	.LVL38:
 453 0054 0130     		adds	r0, r0, #1
 454 0056 0023     		movs	r3, #0
 455 0058 0DF80030 		strb	r3, [sp, r0]
 147:Src/main.c    ****       HAL_UART_Transmit(&huart2, (uint8_t*)number, strlen(number), 0xFFFFFF);
 456              		.loc 1 147 0 discriminator 3
 457 005c 6846     		mov	r0, sp
 458 005e FFF7FEFF 		bl	strlen
 459              	.LVL39:
 460 0062 0A23     		movs	r3, #10
ARM GAS  /tmp/ccpWkAWu.s 			page 14


 461 0064 0DF80030 		strb	r3, [sp, r0]
 148:Src/main.c    ****   }
 462              		.loc 1 148 0 discriminator 3
 463 0068 6846     		mov	r0, sp
 464 006a FFF7FEFF 		bl	strlen
 465              	.LVL40:
 466 006e 82B2     		uxth	r2, r0
 467 0070 7E48     		ldr	r0, .L40
 468 0072 6946     		mov	r1, sp
 469 0074 6FF07F43 		mvn	r3, #-16777216
 470 0078 FFF7FEFF 		bl	HAL_UART_Transmit
 471              	.LVL41:
 472              	.LBE7:
 143:Src/main.c    ****       char number[10];
 473              		.loc 1 143 0 discriminator 3
 474 007c 0134     		adds	r4, r4, #1
 475              	.LVL42:
 476              	.L27:
 143:Src/main.c    ****       char number[10];
 477              		.loc 1 143 0 is_stmt 0 discriminator 1
 478 007e 092C     		cmp	r4, #9
 479 0080 D5DD     		ble	.L28
 480              	.LBE6:
 151:Src/main.c    ****   unsigned char entropy[48];
 481              		.loc 1 151 0 is_stmt 1
 482 0082 0DF60C70 		addw	r0, sp, #3852
 483 0086 7C49     		ldr	r1, .L40+12
 484 0088 6122     		movs	r2, #97
 485 008a FFF7FEFF 		bl	memcpy
 486              	.LVL43:
 487              	.LBB8:
 154:Src/main.c    ****     char high = entropy_string[count*2];
 488              		.loc 1 154 0
 489 008e 0023     		movs	r3, #0
 490 0090 46E0     		b	.L29
 491              	.LVL44:
 492              	.L34:
 493              	.LBB9:
 155:Src/main.c    ****     char low = entropy_string[count*2 + 1];
 494              		.loc 1 155 0
 495 0092 5A00     		lsls	r2, r3, #1
 496 0094 0DF57761 		add	r1, sp, #3952
 497 0098 1144     		add	r1, r1, r2
 498 009a 11F8640C 		ldrb	r0, [r1, #-100]	@ zero_extendqisi2
 499              	.LVL45:
 156:Src/main.c    ****     entropy[count] = 0;
 500              		.loc 1 156 0
 501 009e 0DF57761 		add	r1, sp, #3952
 502 00a2 0A44     		add	r2, r2, r1
 503 00a4 12F8631C 		ldrb	r1, [r2, #-99]	@ zero_extendqisi2
 504              	.LVL46:
 157:Src/main.c    ****     
 505              		.loc 1 157 0
 506 00a8 0024     		movs	r4, #0
 507 00aa 0DF57762 		add	r2, sp, #3952
 508 00ae 1A44     		add	r2, r2, r3
 509 00b0 02F8944C 		strb	r4, [r2, #-148]
ARM GAS  /tmp/ccpWkAWu.s 			page 15


 159:Src/main.c    ****         entropy[count] = (high - '0') << 4;
 510              		.loc 1 159 0
 511 00b4 A0F13002 		sub	r2, r0, #48
 512 00b8 D2B2     		uxtb	r2, r2
 513 00ba 092A     		cmp	r2, #9
 514 00bc 06D8     		bhi	.L30
 160:Src/main.c    ****     } else if (high >= 'A' && high <= 'F') {
 515              		.loc 1 160 0
 516 00be 1201     		lsls	r2, r2, #4
 517 00c0 0DF57760 		add	r0, sp, #3952
 518              	.LVL47:
 519 00c4 1844     		add	r0, r0, r3
 520              	.LVL48:
 521 00c6 00F8942C 		strb	r2, [r0, #-148]
 522 00ca 0CE0     		b	.L31
 523              	.LVL49:
 524              	.L30:
 161:Src/main.c    ****         entropy[count] = (high - 'A' + 10) << 4;
 525              		.loc 1 161 0
 526 00cc A0F14102 		sub	r2, r0, #65
 527 00d0 D2B2     		uxtb	r2, r2
 528 00d2 052A     		cmp	r2, #5
 529 00d4 07D8     		bhi	.L31
 162:Src/main.c    ****     }
 530              		.loc 1 162 0
 531 00d6 A0F13702 		sub	r2, r0, #55
 532 00da 1201     		lsls	r2, r2, #4
 533 00dc 0DF57760 		add	r0, sp, #3952
 534              	.LVL50:
 535 00e0 1844     		add	r0, r0, r3
 536              	.LVL51:
 537 00e2 00F8942C 		strb	r2, [r0, #-148]
 538              	.L31:
 165:Src/main.c    ****         entropy[count] |= low - '0';
 539              		.loc 1 165 0
 540 00e6 A1F13002 		sub	r2, r1, #48
 541 00ea D2B2     		uxtb	r2, r2
 542 00ec 092A     		cmp	r2, #9
 543 00ee 08D8     		bhi	.L32
 166:Src/main.c    ****     } else if (low >= 'A' && low <= 'F') {
 544              		.loc 1 166 0
 545 00f0 0DF57761 		add	r1, sp, #3952
 546              	.LVL52:
 547 00f4 1944     		add	r1, r1, r3
 548              	.LVL53:
 549 00f6 11F8940C 		ldrb	r0, [r1, #-148]	@ zero_extendqisi2
 550 00fa 0243     		orrs	r2, r2, r0
 551 00fc 01F8942C 		strb	r2, [r1, #-148]
 552 0100 0DE0     		b	.L33
 553              	.LVL54:
 554              	.L32:
 167:Src/main.c    ****         entropy[count] |= low - 'A' + 10;
 555              		.loc 1 167 0
 556 0102 A1F14102 		sub	r2, r1, #65
 557 0106 D2B2     		uxtb	r2, r2
 558 0108 052A     		cmp	r2, #5
 559 010a 08D8     		bhi	.L33
ARM GAS  /tmp/ccpWkAWu.s 			page 16


 168:Src/main.c    ****     }
 560              		.loc 1 168 0
 561 010c 3739     		subs	r1, r1, #55
 562              	.LVL55:
 563 010e 0DF57762 		add	r2, sp, #3952
 564              	.LVL56:
 565 0112 D018     		adds	r0, r2, r3
 566 0114 10F8942C 		ldrb	r2, [r0, #-148]	@ zero_extendqisi2
 567              	.LVL57:
 568 0118 0A43     		orrs	r2, r2, r1
 569 011a 00F8942C 		strb	r2, [r0, #-148]
 570              	.LVL58:
 571              	.L33:
 572              	.LBE9:
 154:Src/main.c    ****     char high = entropy_string[count*2];
 573              		.loc 1 154 0 discriminator 2
 574 011e 0133     		adds	r3, r3, #1
 575              	.LVL59:
 576              	.L29:
 154:Src/main.c    ****     char high = entropy_string[count*2];
 577              		.loc 1 154 0 is_stmt 0 discriminator 1
 578 0120 2F2B     		cmp	r3, #47
 579 0122 B6D9     		bls	.L34
 580              	.LBE8:
 171:Src/main.c    ****   
 581              		.loc 1 171 0 is_stmt 1
 582 0124 0DF6DC60 		addw	r0, sp, #3804
 583 0128 0021     		movs	r1, #0
 584 012a 0122     		movs	r2, #1
 585 012c FFF7FEFF 		bl	randombytes_init
 586              	.LVL60:
 186:Src/main.c    ****   unsigned char pk[CRYPTO_PUBLICKEYBYTES];
 587              		.loc 1 186 0
 588 0130 0DF5F264 		add	r4, sp, #1936
 589 0134 514D     		ldr	r5, .L40+16
 590 0136 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 591 0138 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 592 013a 2B68     		ldr	r3, [r5]
 593 013c 2360     		str	r3, [r4]
 594 013e 0DF2A470 		addw	r0, sp, #1956
 595 0142 0021     		movs	r1, #0
 596 0144 4FF4E762 		mov	r2, #1848
 597 0148 FFF7FEFF 		bl	memset
 598              	.LVL61:
 191:Src/main.c    ****   ans = crypto_kem_keypair(pk, sk);
 599              		.loc 1 191 0
 600 014c 4748     		ldr	r0, .L40
 601 014e 4C49     		ldr	r1, .L40+20
 602 0150 1422     		movs	r2, #20
 603 0152 6FF07F43 		mvn	r3, #-16777216
 604 0156 FFF7FEFF 		bl	HAL_UART_Transmit
 605              	.LVL62:
 192:Src/main.c    ****   if (ans != 0) HAL_UART_Transmit(&huart2, (uint8_t*)ERR_PAIR, strlen(ERR_PAIR), 0xFFFFFF);
 606              		.loc 1 192 0
 607 015a 11A8     		add	r0, sp, #68
 608 015c 0BA9     		add	r1, sp, #44
 609 015e FFF7FEFF 		bl	crypto_kem_keypair
ARM GAS  /tmp/ccpWkAWu.s 			page 17


 610              	.LVL63:
 193:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)PK, strlen(PK), 0xFFFFFF);
 611              		.loc 1 193 0
 612 0162 30B1     		cbz	r0, .L35
 193:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)PK, strlen(PK), 0xFFFFFF);
 613              		.loc 1 193 0 is_stmt 0 discriminator 1
 614 0164 4148     		ldr	r0, .L40
 615              	.LVL64:
 616 0166 4749     		ldr	r1, .L40+24
 617 0168 1222     		movs	r2, #18
 618 016a 6FF07F43 		mvn	r3, #-16777216
 619 016e FFF7FEFF 		bl	HAL_UART_Transmit
 620              	.LVL65:
 621              	.L35:
 194:Src/main.c    ****   printBytesKAT(pk, CRYPTO_PUBLICKEYBYTES);
 622              		.loc 1 194 0 is_stmt 1
 623 0172 3E4C     		ldr	r4, .L40
 624 0174 2046     		mov	r0, r4
 625 0176 4449     		ldr	r1, .L40+28
 626 0178 1122     		movs	r2, #17
 627 017a 6FF07F43 		mvn	r3, #-16777216
 628 017e FFF7FEFF 		bl	HAL_UART_Transmit
 629              	.LVL66:
 195:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SK, strlen(SK), 0xFFFFFF);
 630              		.loc 1 195 0
 631 0182 11A8     		add	r0, sp, #68
 632 0184 40F24C71 		movw	r1, #1868
 633 0188 FFF7FEFF 		bl	printBytesKAT
 634              	.LVL67:
 196:Src/main.c    ****   printBytes(sk, CRYPTO_SECRETKEYBYTES);
 635              		.loc 1 196 0
 636 018c 2046     		mov	r0, r4
 637 018e 3F49     		ldr	r1, .L40+32
 638 0190 1222     		movs	r2, #18
 639 0192 6FF07F43 		mvn	r3, #-16777216
 640 0196 FFF7FEFF 		bl	HAL_UART_Transmit
 641              	.LVL68:
 197:Src/main.c    ****   
 642              		.loc 1 197 0
 643 019a 0BA8     		add	r0, sp, #44
 644 019c 1821     		movs	r1, #24
 645 019e FFF7FEFF 		bl	printBytes
 646              	.LVL69:
 199:Src/main.c    ****   ans = crypto_kem_enc(msg, ss, pk);
 647              		.loc 1 199 0
 648 01a2 2046     		mov	r0, r4
 649 01a4 3A49     		ldr	r1, .L40+36
 650 01a6 0F22     		movs	r2, #15
 651 01a8 6FF07F43 		mvn	r3, #-16777216
 652 01ac FFF7FEFF 		bl	HAL_UART_Transmit
 653              	.LVL70:
 200:Src/main.c    ****   if (ans != 0) HAL_UART_Transmit(&huart2, (uint8_t*)ERR_ENC, strlen(ERR_ENC), 0xFFFFFF);
 654              		.loc 1 200 0
 655 01b0 0DF5F260 		add	r0, sp, #1936
 656 01b4 03A9     		add	r1, sp, #12
 657 01b6 11AA     		add	r2, sp, #68
 658 01b8 FFF7FEFF 		bl	crypto_kem_enc
ARM GAS  /tmp/ccpWkAWu.s 			page 18


 659              	.LVL71:
 201:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SHOW_CTX, strlen(SHOW_CTX), 0xFFFFFF);
 660              		.loc 1 201 0
 661 01bc 30B1     		cbz	r0, .L36
 201:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SHOW_CTX, strlen(SHOW_CTX), 0xFFFFFF);
 662              		.loc 1 201 0 is_stmt 0 discriminator 1
 663 01be 2046     		mov	r0, r4
 664              	.LVL72:
 665 01c0 3449     		ldr	r1, .L40+40
 666 01c2 0E22     		movs	r2, #14
 667 01c4 6FF07F43 		mvn	r3, #-16777216
 668 01c8 FFF7FEFF 		bl	HAL_UART_Transmit
 669              	.LVL73:
 670              	.L36:
 202:Src/main.c    ****   printBytesKAT(msg, CRYPTO_CIPHERTEXTBYTES);
 671              		.loc 1 202 0 is_stmt 1
 672 01cc 274C     		ldr	r4, .L40
 673 01ce 2046     		mov	r0, r4
 674 01d0 3149     		ldr	r1, .L40+44
 675 01d2 2022     		movs	r2, #32
 676 01d4 6FF07F43 		mvn	r3, #-16777216
 677 01d8 FFF7FEFF 		bl	HAL_UART_Transmit
 678              	.LVL74:
 203:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SHOW_SS, strlen(SHOW_SS), 0xFFFFFF);
 679              		.loc 1 203 0
 680 01dc 0DF5F260 		add	r0, sp, #1936
 681 01e0 40F24C71 		movw	r1, #1868
 682 01e4 FFF7FEFF 		bl	printBytesKAT
 683              	.LVL75:
 204:Src/main.c    ****   printBytes(ss, CRYPTO_BYTES);
 684              		.loc 1 204 0
 685 01e8 2046     		mov	r0, r4
 686 01ea 2C49     		ldr	r1, .L40+48
 687 01ec 2D22     		movs	r2, #45
 688 01ee 6FF07F43 		mvn	r3, #-16777216
 689 01f2 FFF7FEFF 		bl	HAL_UART_Transmit
 690              	.LVL76:
 205:Src/main.c    ****   
 691              		.loc 1 205 0
 692 01f6 03A8     		add	r0, sp, #12
 693 01f8 2021     		movs	r1, #32
 694 01fa FFF7FEFF 		bl	printBytes
 695              	.LVL77:
 207:Src/main.c    ****   ans = crypto_kem_dec(ss, msg, sk);
 696              		.loc 1 207 0
 697 01fe 2046     		mov	r0, r4
 698 0200 2749     		ldr	r1, .L40+52
 699 0202 0F22     		movs	r2, #15
 700 0204 6FF07F43 		mvn	r3, #-16777216
 701 0208 FFF7FEFF 		bl	HAL_UART_Transmit
 702              	.LVL78:
 208:Src/main.c    ****   if (ans != 0) HAL_UART_Transmit(&huart2, (uint8_t*)ERR_DEC, strlen(ERR_DEC), 0xFFFFFF);
 703              		.loc 1 208 0
 704 020c 03A8     		add	r0, sp, #12
 705 020e 0DF5F261 		add	r1, sp, #1936
 706 0212 0BAA     		add	r2, sp, #44
 707 0214 FFF7FEFF 		bl	crypto_kem_dec
ARM GAS  /tmp/ccpWkAWu.s 			page 19


 708              	.LVL79:
 209:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SHOW_SS, strlen(SHOW_SS), 0xFFFFFF);
 709              		.loc 1 209 0
 710 0218 30B1     		cbz	r0, .L37
 209:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t*)SHOW_SS, strlen(SHOW_SS), 0xFFFFFF);
 711              		.loc 1 209 0 is_stmt 0 discriminator 1
 712 021a 2046     		mov	r0, r4
 713              	.LVL80:
 714 021c 2149     		ldr	r1, .L40+56
 715 021e 0E22     		movs	r2, #14
 716 0220 6FF07F43 		mvn	r3, #-16777216
 717 0224 FFF7FEFF 		bl	HAL_UART_Transmit
 718              	.LVL81:
 719              	.L37:
 210:Src/main.c    ****   printBytes(ss, CRYPTO_BYTES);
 720              		.loc 1 210 0 is_stmt 1
 721 0228 104C     		ldr	r4, .L40
 722 022a 2046     		mov	r0, r4
 723 022c 1B49     		ldr	r1, .L40+48
 724 022e 2D22     		movs	r2, #45
 725 0230 6FF07F43 		mvn	r3, #-16777216
 726 0234 FFF7FEFF 		bl	HAL_UART_Transmit
 727              	.LVL82:
 211:Src/main.c    ****   
 728              		.loc 1 211 0
 729 0238 03A8     		add	r0, sp, #12
 730 023a 2021     		movs	r1, #32
 731 023c FFF7FEFF 		bl	printBytes
 732              	.LVL83:
 213:Src/main.c    ****   printBytes(entropy, 48);
 733              		.loc 1 213 0
 734 0240 2046     		mov	r0, r4
 735 0242 1949     		ldr	r1, .L40+60
 736 0244 0B22     		movs	r2, #11
 737 0246 6FF07F43 		mvn	r3, #-16777216
 738 024a FFF7FEFF 		bl	HAL_UART_Transmit
 739              	.LVL84:
 214:Src/main.c    ****   /* USER CODE END 2 */
 740              		.loc 1 214 0
 741 024e 0DF6DC60 		addw	r0, sp, #3804
 742 0252 3021     		movs	r1, #48
 743 0254 FFF7FEFF 		bl	printBytes
 744              	.LVL85:
 745              	.L38:
 222:Src/main.c    ****     HAL_Delay(1000); //Delay 1 Seconds
 746              		.loc 1 222 0 discriminator 1
 747 0258 1448     		ldr	r0, .L40+64
 748 025a 2021     		movs	r1, #32
 749 025c FFF7FEFF 		bl	HAL_GPIO_TogglePin
 750              	.LVL86:
 223:Src/main.c    ****     /* USER CODE BEGIN 3 */
 751              		.loc 1 223 0 discriminator 1
 752 0260 4FF47A70 		mov	r0, #1000
 753 0264 FFF7FEFF 		bl	HAL_Delay
 754              	.LVL87:
 225:Src/main.c    ****   /* USER CODE END 3 */
 755              		.loc 1 225 0 discriminator 1
ARM GAS  /tmp/ccpWkAWu.s 			page 20


 756 0268 F6E7     		b	.L38
 757              	.L41:
 758 026a 00BF     		.align	2
 759              	.L40:
 760 026c 00000000 		.word	huart2
 761 0270 14000000 		.word	.LC2
 762 0274 D34D6210 		.word	274877907
 763 0278 14010000 		.word	.LC3
 764 027c 00000000 		.word	.LANCHOR0
 765 0280 20000000 		.word	.LC5
 766 0284 38000000 		.word	.LC6
 767 0288 4C000000 		.word	.LC7
 768 028c 60000000 		.word	.LC8
 769 0290 74000000 		.word	.LC9
 770 0294 84000000 		.word	.LC10
 771 0298 94000000 		.word	.LC11
 772 029c B8000000 		.word	.LC12
 773 02a0 E8000000 		.word	.LC13
 774 02a4 F8000000 		.word	.LC14
 775 02a8 08010000 		.word	.LC15
 776 02ac 00000240 		.word	1073872896
 777              		.cfi_endproc
 778              	.LFE143:
 780              		.section	.text.Error_Handler,"ax",%progbits
 781              		.align	2
 782              		.global	Error_Handler
 783              		.thumb
 784              		.thumb_func
 786              	Error_Handler:
 787              	.LFB145:
 272:Src/main.c    **** 
 273:Src/main.c    **** /* USER CODE BEGIN 4 */
 274:Src/main.c    **** 
 275:Src/main.c    **** /* USER CODE END 4 */
 276:Src/main.c    **** 
 277:Src/main.c    **** /**
 278:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 279:Src/main.c    ****   * @retval None
 280:Src/main.c    ****   */
 281:Src/main.c    **** void Error_Handler(void)
 282:Src/main.c    **** {
 788              		.loc 1 282 0
 789              		.cfi_startproc
 790              		@ args = 0, pretend = 0, frame = 0
 791              		@ frame_needed = 0, uses_anonymous_args = 0
 792              		@ link register save eliminated.
 793 0000 7047     		bx	lr
 794              		.cfi_endproc
 795              	.LFE145:
 797 0002 00BF     		.section	.rodata
 798              		.align	2
 799              		.set	.LANCHOR0,. + 0
 800              	.LC4:
 801 0000 48656C6C 		.ascii	"Hello Nucleo Fun!\012\015\000"
 801      6F204E75 
 801      636C656F 
 801      2046756E 
ARM GAS  /tmp/ccpWkAWu.s 			page 21


 801      210A0D00 
 802 0014 00000000 		.space	1848
 802      00000000 
 802      00000000 
 802      00000000 
 802      00000000 
 803              		.section	.rodata.str1.4,"aMS",%progbits,1
 804              		.align	2
 805              	.LC0:
 806 0000 25303278 		.ascii	"%02x\000"
 806      00
 807 0005 000000   		.space	3
 808              	.LC1:
 809 0008 30303030 		.ascii	"00000000\000"
 809      30303030 
 809      00
 810 0011 000000   		.space	3
 811              	.LC2:
 812 0014 49276D20 		.ascii	"I'm alive\012\015\000"
 812      616C6976 
 812      650A0D00 
 813              	.LC5:
 814 0020 0A0D4765 		.ascii	"\012\015Generating keys...\000"
 814      6E657261 
 814      74696E67 
 814      206B6579 
 814      732E2E2E 
 815 0035 000000   		.space	3
 816              	.LC6:
 817 0038 0A0D4572 		.ascii	"\012\015Error in keypair\000"
 817      726F7220 
 817      696E206B 
 817      65797061 
 817      697200
 818 004b 00       		.space	1
 819              	.LC7:
 820 004c 0A0D5075 		.ascii	"\012\015Public key is: \000"
 820      626C6963 
 820      206B6579 
 820      2069733A 
 820      2000
 821 005e 0000     		.space	2
 822              	.LC8:
 823 0060 0A0D5072 		.ascii	"\012\015Private key is: \000"
 823      69766174 
 823      65206B65 
 823      79206973 
 823      3A2000
 824 0073 00       		.space	1
 825              	.LC9:
 826 0074 0A0D456E 		.ascii	"\012\015Encrypting...\000"
 826      63727970 
 826      74696E67 
 826      2E2E2E00 
 827              	.LC10:
 828 0084 0A0D4572 		.ascii	"\012\015Error in enc\000"
 828      726F7220 
ARM GAS  /tmp/ccpWkAWu.s 			page 22


 828      696E2065 
 828      6E6300
 829 0093 00       		.space	1
 830              	.LC11:
 831 0094 0A0D4369 		.ascii	"\012\015Ciphertext Encrypt(e, pk) is: \000"
 831      70686572 
 831      74657874 
 831      20456E63 
 831      72797074 
 832 00b5 000000   		.space	3
 833              	.LC12:
 834 00b8 0A0D5368 		.ascii	"\012\015Shared secret Hash(e) - or Hash(c.k) - is: "
 834      61726564 
 834      20736563 
 834      72657420 
 834      48617368 
 835 00e5 00       		.ascii	"\000"
 836 00e6 0000     		.space	2
 837              	.LC13:
 838 00e8 0A0D4465 		.ascii	"\012\015Decrypting...\000"
 838      63727970 
 838      74696E67 
 838      2E2E2E00 
 839              	.LC14:
 840 00f8 0A0D4572 		.ascii	"\012\015Error in dec\000"
 840      726F7220 
 840      696E2064 
 840      656300
 841 0107 00       		.space	1
 842              	.LC15:
 843 0108 0A0D5365 		.ascii	"\012\015Seed is: \000"
 843      65642069 
 843      733A2000 
 844              	.LC3:
 845 0114 30363135 		.ascii	"061550234D158C5EC95595FE04EF7A25767F2E24CC2BC479D09"
 845      35303233 
 845      34443135 
 845      38433545 
 845      43393535 
 846 0147 44383644 		.ascii	"D86DC9ABCFDE7056A8C266F9EF97ED08541DBD2E1FFA1\000"
 846      43394142 
 846      43464445 
 846      37303536 
 846      41384332 
 847              		.text
 848              	.Letext0:
 849              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 850              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 851              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 852              		.file 5 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h"
 853              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 854              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 855              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 856              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 857              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 858              		.file 11 "Inc/qc_ldpc_parameters.h"
 859              		.file 12 "Drivers/CMSIS/Include/core_cm4.h"
ARM GAS  /tmp/ccpWkAWu.s 			page 23


 860              		.file 13 "Inc/usart.h"
 861              		.file 14 "/usr/include/newlib/stdio.h"
 862              		.file 15 "/usr/include/newlib/string.h"
 863              		.file 16 "/usr/include/newlib/stdlib.h"
 864              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 865              		.file 18 "Inc/gpio.h"
 866              		.file 19 "Inc/rng.h"
 867              		.file 20 "Inc/api.h"
 868              		.file 21 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
ARM GAS  /tmp/ccpWkAWu.s 			page 24


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccpWkAWu.s:20     .text.Delay:0000000000000000 $t
     /tmp/ccpWkAWu.s:25     .text.Delay:0000000000000000 Delay
     /tmp/ccpWkAWu.s:55     .text.printBytes:0000000000000000 $t
     /tmp/ccpWkAWu.s:60     .text.printBytes:0000000000000000 printBytes
     /tmp/ccpWkAWu.s:114    .text.printBytes:0000000000000030 $d
     /tmp/ccpWkAWu.s:120    .text.printBytesKAT:0000000000000000 $t
     /tmp/ccpWkAWu.s:125    .text.printBytesKAT:0000000000000000 printBytesKAT
     /tmp/ccpWkAWu.s:252    .text.printBytesKAT:0000000000000084 $d
     /tmp/ccpWkAWu.s:259    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccpWkAWu.s:264    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccpWkAWu.s:380    .text.SystemClock_Config:000000000000009c $d
     /tmp/ccpWkAWu.s:386    .text.main:0000000000000000 $t
     /tmp/ccpWkAWu.s:391    .text.main:0000000000000000 main
     /tmp/ccpWkAWu.s:760    .text.main:000000000000026c $d
     /tmp/ccpWkAWu.s:781    .text.Error_Handler:0000000000000000 $t
     /tmp/ccpWkAWu.s:786    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccpWkAWu.s:798    .rodata:0000000000000000 $d
     /tmp/ccpWkAWu.s:804    .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.0.20963d46ba5d8e371b8630ece00f11ec
                           .group:0000000000000000 wm4.stm32f4xx_hal_conf.h.24.d14dd899dbfa16d6dc9a7b8d5f0b81d2
                           .group:0000000000000000 wm4.stm32f4xx.h.55.8c995fbadbb7a126747b547eb8ec7b5b
                           .group:0000000000000000 wm4.stm32f446xx.h.51.16a9122ede9860ebbb552c9e423d1ecd
                           .group:0000000000000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:0000000000000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:0000000000000000 wm4._intsup.h.10.35a45952db64d30146faa63a55c20c1c
                           .group:0000000000000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:0000000000000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:0000000000000000 wm4.cmsis_version.h.32.4d5822004c01a829a975260e854b5f8e
                           .group:0000000000000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.f42444deefab66ffa141b9b9fddb57a3
                           .group:0000000000000000 wm4.core_cm4.h.174.059a5e001a9e729091d1407208e93224
                           .group:0000000000000000 wm4.mpu_armv7.h.32.27b4593cb2f8d3152ca5d97a9d72b321
                           .group:0000000000000000 wm4.stm32f446xx.h.934.bc7ea77f64b5be5f795628ebc7fc6b73
                           .group:0000000000000000 wm4.stm32f4xx.h.212.729f0f890654645a3f47ccc0cc2b00e7
                           .group:0000000000000000 wm4.stm32_hal_legacy.h.23.ef4988de22c7a2f0806a94b08b5606e0
                           .group:0000000000000000 wm4.stddef.h.39.c744ceb84abf2f8351653f0e2622da1c
                           .group:0000000000000000 wm4.stm32f4xx_hal_def.h.58.2d2c85d5b9693a63e90566b806e8a752
                           .group:0000000000000000 wm4.stm32f4xx_hal_rcc_ex.h.22.ed8712e28628f6d35bd6f8847ee2f18f
                           .group:0000000000000000 wm4.stm32f4xx_hal_rcc.h.108.0c18a3cfc2dd91bdf92470b4bd0ea1b5
                           .group:0000000000000000 wm4.stm32f4xx_hal_exti.h.22.66e33df8a935c9f8e1682d5515a6c09a
                           .group:0000000000000000 wm4.stm32f4xx_hal_gpio.h.22.be2c6bcf9722096ea8f49a41bf6aa50c
                           .group:0000000000000000 wm4.stm32f4xx_hal_gpio_ex.h.22.6858f59ca8a52c645189c74569e4d5b8
                           .group:0000000000000000 wm4.stm32f4xx_hal_gpio.h.264.528537eb92c2ec5c1cd9dfb4d255d1da
                           .group:0000000000000000 wm4.stm32f4xx_hal_dma.h.22.fffce20ac9119c50557659c75e75ab1c
                           .group:0000000000000000 wm4.stm32f4xx_hal_dma.h.721.a1e57ffbc615f926e6509c5acc65e492
                           .group:0000000000000000 wm4.stm32f4xx_hal_cortex.h.22.e6aa3b847b5388be63c32d1f9e696ef7
                           .group:0000000000000000 wm4.stm32f4xx_hal_flash.h.22.31b301be2655c3eb8583e51c8231544a
                           .group:0000000000000000 wm4.stm32f4xx_hal_flash_ex.h.22.df74a74dd40656a7fcd7d90cedd190b4
                           .group:0000000000000000 wm4.stm32f4xx_hal_flash.h.363.51efdf0f6c88f683efb89d7cc95cc1be
                           .group:0000000000000000 wm4.stm32f4xx_hal_pwr.h.22.2c27d93ae187efe3a73816f03a329970
                           .group:0000000000000000 wm4.stm32f4xx_hal_pwr_ex.h.22.cf49f655fb514fa1eda6a251fa1b2f1a
                           .group:0000000000000000 wm4.stm32f4xx_hal_pwr.h.337.60b43975c84527a23cb6994b23165a5e
                           .group:0000000000000000 wm4.stm32f4xx_hal_uart.h.22.2b47c8130d845b927904837c0b2264ce
                           .group:0000000000000000 wm4.stm32f4xx_hal.h.72.a5a58188aa461a0614f1e58e159c7840
ARM GAS  /tmp/ccpWkAWu.s 			page 25


                           .group:0000000000000000 wm4.main.h.61.f713c471afe2510354bc6b2444b9b417
                           .group:0000000000000000 wm4.newlib.h.8.2702bca278809460f0af6fba1d84eb68
                           .group:0000000000000000 wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff
                           .group:0000000000000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:0000000000000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:0000000000000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:0000000000000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:0000000000000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:0000000000000000 wm4.cdefs.h.47.55832cb26e4a21cedaa9b1b3b922c6b1
                           .group:0000000000000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:0000000000000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:0000000000000000 wm4.time.h.8.2930fe070f4a8096b07db9159698c8e3
                           .group:0000000000000000 wm4.time.h.2.4581ce0ffb6627cfc02162c94bf846c9
                           .group:0000000000000000 wm4.time.h.24.3660bbb2d0a4c7457ff52ba3ada4c166
                           .group:0000000000000000 wm4.types.h.24.b2be5f53932a9c9d07787288b29b6d75
                           .group:0000000000000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:0000000000000000 wm4.types.h.82.82b71f3f44c70e3a459d0f66642b05eb
                           .group:0000000000000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:0000000000000000 wm4.time.h.217.2f437ac2cf06537c84703833b0977905
                           .group:0000000000000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:0000000000000000 wm4.stdlib.h.54.4fb06e985dc2cdf07f3ef03d3ed01397
                           .group:0000000000000000 wm4.stdio.h.27.3fc80220048df77954e38daec3bb9670
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:0000000000000000 wm4.stdio.h.68.ff6d7571d3ad75c55f15e26dbaa81e35
                           .group:0000000000000000 wm4.qc_ldpc_parameters.h.37.6a7dc7a81c3b4c6a57df61d48c0f4546
                           .group:0000000000000000 wm4.inttypes.h.14.d76379e1484484ef6b6b246cc782d8dc
                           .group:0000000000000000 wm4.inttypes.h.23.73ff1ea04b6018cd02b26f6fdc94fae9
                           .group:0000000000000000 wm4.limits.h.25.5fc8418077d2a1b3fdafee07d2348450
                           .group:0000000000000000 wm4.gf2x_limbs.h.44.4ba8ea293ca87ae1eb808c65b3f7859c
                           .group:0000000000000000 wm4.gf2x_arith.h.78.84d3114adf056aa03d6e1720f5f09797
                           .group:0000000000000000 wm4.rng.h.43.d878a412a37b8758e9c11dbf27ed5812
                           .group:0000000000000000 wm4.gf2x_arith_mod_xPplusOne.h.43.dd456d3b85305b5c168d761e87b26291
                           .group:0000000000000000 wm4.api.h.39.461facc9facebdb29c71caf95c7c4c98

UNDEFINED SYMBOLS
sprintf
HAL_UART_Transmit
huart2
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_USART2_UART_Init
srand
rand
itoa
strlen
memcpy
randombytes_init
memset
crypto_kem_keypair
crypto_kem_enc
crypto_kem_dec
HAL_GPIO_TogglePin
HAL_Delay
